Received: from postoffice10.mail.cornell.edu (postoffice10.mail.cornell.edu [132.236.56.14])
	by sundial.cs.cornell.edu (8.11.7-20031020/8.11.7/M-3.22) with ESMTP id k27Gcnt00359
	for <egs+summary@cs.cornell.edu>; Tue, 7 Mar 2006 11:38:49 -0500 (EST)
Received: from webmail.cornell.edu (hermes21.mail.cornell.edu [132.236.56.20])
	by postoffice10.mail.cornell.edu (8.12.10/8.12.6) with ESMTP id k27GcksW005212
	for <egs+summary@cs.cornell.edu>; Tue, 7 Mar 2006 11:38:47 -0500 (EST)
Received: from 128.84.98.131
        by webmail.cornell.edu with HTTP;
        Tue, 7 Mar 2006 11:38:48 -0500 (EST)
Message-ID: <4943.128.84.98.131.1141749528.squirrel@webmail.cornell.edu>
Date: Tue, 7 Mar 2006 11:38:48 -0500 (EST)
Subject: paper 12 - storage systems
From: "Abhishek Santosh Gupta" <asg46@cornell.edu>
To: egs+summary@cs.cornell.edu
User-Agent: SquirrelMail/1.4.5
MIME-Version: 1.0
Content-Type: text/plain;charset=iso-8859-1
Content-Transfer-Encoding: 8bit
X-Priority: 3 (Normal)
Importance: Normal

PAST

it exploits the multitude and diversity (in geography, ownership,
administration, jurisdiction) of nodes in the Internet to achieve strong
persistence and high availability.

PAST is layered on top of Pastry which is used for routing.

files stored in PAST are associated with a quasi-unique fileid that is
generated at the time of is generated at the time of its insertion into
the PAST. fileid  is computed as the secure hash of the file name, owner's
public key along with a randomly chosen salt.

each file is generally replicated on k numerically closest nodes. in order
to accommodate differences in storage capacity and utilization of nodes
within a leaf set, PAST allows a node that is not one of the k numerically
closest nodes to alternatively store the file. this is termed as replica
diversion.


the authors offer a upper bound on k. Further, irrespective of the
popularity of a file, k replicas are generated ( k must be proportional to
popularity to relax storage requirements)
they suggest caching in order to consider popularity requirements but they
also state that a node might discard its cache ( rendering this caching
scheme useless --no incentives- especially malicious nodes)

in order to control the distribution of per-node storage capacities, PAST
has a policy to allow a node with larger storage capacity to split and
join under multiple nodeIds. Joining as multiple nodes with different
nodeIDs seems a bad idea as opposed to multiple nodes with same nodeIds.
it provides lower availability if the large node fails ( as the same node
may contain multiple pointers to it since multiple nodes have different
ids) . even  large malicious nodes will be able to control larger portions
of a node's routing table.

policies:
diverting a large file is better than diverting multiple small ones
thereby reducing the insertion overhead  and also minimizing the impact of
replica diversion for lookups.
in case of failures of nodes (in the case of replica diversion) background
operations have to be carried out so that the affected files can be
migrated.

a node chosen for replica diversion must have more remaining space than
the average space.

the CFS paper points to the fact that the system as a whole may have
sufficient space to store a file but individual nodes may not have
sufficient space resulting in the file being rejected.
it also suffers from load imbalance due to difference in popularity of files.


CFS

CFS stores blocks rather than files and spreads blocks evenly over
available servers. thus although better space-efficiency is achieved the
lookup time per object increases.
CFS achieves better load balancing than PAST due to the above mechanism too.

CFS stores data for only a finite amount of time. Thus, nodes require to
request extensions periodically. this approach limits DOS attacks which
try to insert garbage data into the system.

whenever a file needs to be updated, the publisher is required to sign the
new root node. the system checks the signature to authenticate the
publisher ( external references need not be changed in case of an update).

however, if the node storing the external references fails(or that space
gets corrupted), the system would suffer from availability permanently. (
disk space would be reclaimed in case no extension was requested but
availability would still suffer)

CFS has a quota system that limits the amount of data that any particular
IP can insert into the system. However, this can also serve as mechanism
to launch DOS attacks by spoofing IP (assuming that different public key
pairs can be generated).


it uses CHORD for routing.

virtual servers (having different nodeIDS) creates vulnerabilities in the
system.















