Received: from Hydro.CAM.ORG (Hydro.CAM.ORG [198.168.100.7])
	by aleve.media.mit.edu (8.9.1a/8.9.1/+ALEVE) with ESMTP id SAA11114
	for <handyboard@media.mit.edu>; Wed, 27 Jan 1999 18:29:40 -0500 (EST)
Received: from cam.org (mdavies.HIP.CAM.ORG [199.84.42.249])
          by Hydro.CAM.ORG (8.8.8/8.8.4) with ESMTP
	  id SAA19859; Wed, 27 Jan 1999 18:29:06 -0500 (EST)
Message-Id: <36AFA140.E0110319@cam.org>
Date: Wed, 27 Jan 1999 18:29:05 -0500
From: Max Davies <mdavies@CAM.ORG>
X-Mailer: Mozilla 4.5 [en] (Win95; I)
X-Accept-Language: en
Mime-Version: 1.0
To: Adam Oliver <oli@wantree.com.au>
Cc: "'Handyboard Mailing List'" <handyboard@media.mit.edu>
Subject: Re: executing instructions quickly
References: <002d01be4a01$1e58a060$0264648c@adam>
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

Adam Oliver wrote:

> My question : is it faster to write a procedure and use 6 calls, ie
> move(1,100)    move(2,100)    move(3,100)    .....etc or write it as a
> macro?

If your macro just calls the "move" routine it will make absolutely no
difference because your are in effect typing in the above anyway.

If your macro inserts the code for "move" inline rather than calling it it
will be only very slightly faster and at a cost of much more memory usage.

Typically the best approach is to ignore speed considerations (within
reason!) during initial development and then to address hot spots should
speed problems arise.  I have often seen software developers wasting tons
and tons of time developing complex code to run just as fast as possible
when the simple approach would have been just as good if not even better.

/Max



