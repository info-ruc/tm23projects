Received: from iceman.cc.utexas.edu (iceman.cc.utexas.edu [146.6.71.66])
	by cs.utexas.edu (8.12.10/8.12.10) with ESMTP id h99Ii8wT003190;
	Thu, 9 Oct 2003 13:44:08 -0500 (CDT)
Received: from localhost (localhost [127.0.0.1])
	by iceman.cc.utexas.edu (8.9.3p2/8.9.3/cc-lists.mc-1.30) with SMTP id NAA22330;
	Thu, 9 Oct 2003 13:29:25 -0500 (CDT)
Received: from mail.cs.utexas.edu (root@mail.cs.utexas.edu [128.83.139.10])
	by iceman.cc.utexas.edu (8.9.3p2/8.9.3/cc-lists.mc-1.30) with ESMTP id NAA22289
	for <cs352h@lists.cc.utexas.edu>; Thu, 9 Oct 2003 13:29:15 -0500 (CDT)
From: skeckler@cs.utexas.edu
Received: from fuller.cs.utexas.edu (skeckler@fuller.cs.utexas.edu [128.83.120.177])
	by mail.cs.utexas.edu (8.12.10/8.12.10) with ESMTP id h99ITENl002147
	for <cs352h@lists.cc.utexas.edu>; Thu, 9 Oct 2003 13:29:14 -0500 (CDT)
Received: (from skeckler@localhost)
	by fuller.cs.utexas.edu (8.12.10/8.12.9/Submit) id h99ITDIh019730;
	Thu, 9 Oct 2003 13:29:13 -0500 (CDT)
Date: Thu, 9 Oct 2003 13:29:13 -0500 (CDT)
Message-Id: <200310091829.h99ITDIh019730@fuller.cs.utexas.edu>
To: cs352h@lists.cc.utexas.edu
Subject: verilog
Reply-To: skeckler@cs.utexas.edu
Sender: owner-cs352h@lists.cc.utexas.edu
X-Listprocessor-Version: 8.2.10/020311/17:52 -- ListProc(tm) by CREN


CS352h-ers,

I just posted today's lecture notes along with the example multiplier
I went over in class.  I also posted 3 additional implementations of
the multiplier (total of 4):

mult.v - from class today

mult_assign.v - same structure, but uses the assign statement instead
  of the always statement to implement the combination logic

mult_behav.v - more abstract by getting rid of explicity flip-flop
  declarations.  It basically embeds the flip-flop behavior in with
  the combinational logic.  However, there are a few timing trickes
  required to make these work.  The style of mult.v and mult_behav.v
  is probably better.

mult_ultra.v - uses the operator "*" and is purely combinational (no
  flip-flops).  Here we have lost control over the actual
  implementation of the multiplier.  If we were to synthesize this
  using CAD tools to automatically map it logic gates, we would be
  relying on the synthesis tool to select a good multipler
  implementation.

Finally - go ahead and play around with mult.s - you can add more
tests, test additional operand values, etc.

Cheers,

Steve Keckler                     Computer Architecture and Technology Lab
Assistant Professor               Tel:    (512) 471-9763
Department of Computer Sciences   Dept:   (512) 471-7316
1 University Station C0500        Fax:    (512) 232-1413
The University of Texas at Austin E-mail:  skeckler@cs.utexas.edu
Austin, TX 78712-1188             http://www.cs.utexas.edu/users/skeckler
                                  


