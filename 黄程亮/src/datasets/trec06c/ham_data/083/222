Received: from cornell.edu (cornell.edu [132.236.56.6])
	by sundial.cs.cornell.edu (8.11.3/8.11.3/M-3.10) with ESMTP id g8O4vAh03225
	for <egs@cs.cornell.edu>; Tue, 24 Sep 2002 00:57:10 -0400 (EDT)
Received: from cornell.edu (syr-24-58-48-238.twcny.rr.com [24.58.48.238])
	by cornell.edu (8.9.3/8.9.3) with ESMTP id AAA26981
	for <egs@cs.cornell.edu>; Tue, 24 Sep 2002 00:57:08 -0400 (EDT)
Message-ID: <3D8FF0AD.FF813E84@cornell.edu>
Date: Tue, 24 Sep 2002 00:57:17 -0400
From: Mark Robson <mr228@cornell.edu>
X-Mailer: Mozilla 4.76 [en] (Windows NT 5.0; U)
X-Accept-Language: en
MIME-Version: 1.0
To: egs@CS.Cornell.EDU
Subject: 615 PAPER 19
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This paper present CEDAR: A Core-Extraction Distributed Routing
Algorithm.  The primary contribution is an interesting algorithm that
can identify "core" hosts and use them to establish a sort of backbone
for the network.  Each node chooses a "core" or super node from amongst
it neighbors to communicate with, and route all packets destined for far
away hosts through this core node.  This way, non-core nodes need only
know about their nearby neighbors and one core.  Core nodes communicate
amongst themselves via some other routing protocol (DSR, AODV, etc.) 
Although you could still construct situations where the network diameter
is arbitrarily large, this has the nice property of helping to bound the
diameter.  If everyone chooses a "core" that is within some fixed number
of nodes, then the network diameter is proportional to the diameter of
the core network.

The goal is then to arrive at a minimal set of core nodes such that all
nodes in the network have a core with which to communicate.  This is an
NP-complete task and worse still is that most approximation algorithms
require global knowledge of the network to implement.  They devise a
local knowledge only algorithm to approximately find this minimal set. 
The algorithm works by each node deciding for itself who amongst its
neighbors and itself would make the best core node.  This algorithm
forms the primary contribution of this paper.

Their goal is to optimize for QoS, specifically bandwidth, and their
performance analysis is heavily skewed towards it.  Although it seems
that things like latency aren't adversely affected by their protocol,
they don't really mention any of these other performance metrics.

Packet loss doesn't seem to be a big issue since nodes broadcast packets
(beacons) at regular intervals, however, what may be more of a concern
is node failure, specifically failure of a core node.  Since they are
reducing the networks tolerance for node failures, they should have
provided analysis of this problem in the paper.

Future work might look at optimizing on other metrics besides bandwidth,
specifically latency.  Many applications require low latency, but don't
have high bandwidth requirements.  One might look at how this would work
with their proposed protocol.

--
Mark Robson

