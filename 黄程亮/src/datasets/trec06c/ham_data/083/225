Received: from mailout6-0.nyroc.rr.com (mailout6-0.nyroc.rr.com [24.92.226.125])
	by sundial.cs.cornell.edu (8.11.3/8.11.3/M-3.10) with ESMTP id g8OCLVh20410
	for <egs@cs.cornell.edu>; Tue, 24 Sep 2002 08:21:31 -0400 (EDT)
Received: from hubby.cornell.edu (syr-24-58-42-130.twcny.rr.com [24.58.42.130])
	by mailout6-0.nyroc.rr.com (8.11.6/RoadRunner 1.20) with ESMTP id g8OCLVI14112
	for <egs@cs.cornell.edu>; Tue, 24 Sep 2002 08:21:31 -0400 (EDT)
Message-Id: <5.1.0.14.2.20020924082155.00b7e1f8@postoffice2.mail.cornell.edu>
X-Sender: hs247@postoffice2.mail.cornell.edu (Unverified)
X-Mailer: QUALCOMM Windows Eudora Version 5.1
Date: Tue, 24 Sep 2002 08:22:08 -0400
To: egs@CS.Cornell.EDU
From: Hubert Sun <hs247@cornell.edu>
Subject: 615 Paper 19
Mime-Version: 1.0
Content-Type: text/plain; charset="us-ascii"; format=flowed

CEDAR is the first paper we have looked at which is based on 
clustering.  CEDAR tries to established routes based on bandwidth.  This is 
the performance measurement it uses and in this way it is Quality of 
Service algorithm which tries to satisfy minimum bandwidth requirement of a 
node.  CEDAR has three main parts to it: finding the core graph, 
propagation of bandwidth information amoung the core, and route 
computation.  One of the goals with having core nodes is to minimise the 
changes in the network core when topology changes.  Changes are only effect 
local neighbour hoods, and other core nodes do not have to worry about this.

CEDAR also has this idea of increase and decrease waves to denote high 
bandwidth stable links and short unstable low bandwidth links.  This is the 
basis of how CEDAR calculates routes based on bandwidth.  The idea is that 
short decrease waves are only travel far enough to be local within a 
neighbour hood, and long increase waves are used for links between 
neighbourhoods.  In this way, short unreliable links do not need to be 
propagated to the whole network, where as more important stable bandwidth 
information is.  There are many ideas in this paper that I like about 
CEDAR, and it would be interesting to see how this algorithm work in real 
life.  Though they have many tables and results from simulations, they only 
briefly mention their implementation on Linux.  They only briefly mentioned 
that there were implementation difficulties.  What they found on the Linux 
implementation would have been interesting.

Some things research would be to see how having core nodes and effectively 
a hierarchy effect the other properties of an ad-hoc network.  Intuitively, 
core nodes are used more and require more computation and communication 
power.  This probably means that they can be a bottle neck and their 
battery power (which we have established is important) can run out quickly. 
Perhaps the electing of a core node should take into consideration whether 
the core can handle the work that is required from it.  And for practical 
reasons, one would like to research, does typical ad-hoc network really 
need this sort of structure?  Do ad-hoc networks typically get large enough 
and stay alive long enough to require a hierarchy structure?


