Received: from memphis.ece.cornell.edu (memphis.ece.cornell.edu [128.84.81.8])
	by sundial.cs.cornell.edu (8.11.3/8.11.3/M-3.7) with ESMTP id fB4JjO604666
	for <egs@CS.Cornell.EDU>; Tue, 4 Dec 2001 14:45:24 -0500 (EST)
Received: from kiki.ece.cornell.edu (kiki.ece.cornell.edu [128.84.83.13])
	by memphis.ece.cornell.edu (8.11.6/8.11.2) with ESMTP id fB4Jg1M20822;
	Tue, 4 Dec 2001 14:42:01 -0500
Date: Tue, 4 Dec 2001 14:48:42 -0500 (EST)
From: "Panagiotis (Panos) Papadimitratos" <papadp@ece.cornell.edu>
To: Emin Gun Sirer <egs@CS.Cornell.EDU>
cc: papadp@ece.cornell.edu
Subject: 615 PAPER 68
Message-ID: <Pine.GSO.4.05.10112041424290.1245-100000@kiki.ece.cornell.edu>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII


Review of:"Tapestry: An Infrastructure for Fault-tolerant Wide-area
Location and Routing," by B. Y. Zhao et al. 

Panagiotis Papadimitratos papadp@ece.cornell.edu

Tapestry is an application-level routing protocol that addresses the issue
of locating data objects, which in principle are replicated through out
the network. The addressing scheme draws from the classless inter-domain
routing architecture, in the sense that it also aims at reducing
dramatically the size of the routing tables (of course, no question it
would be exhausting its name space :)

The data are replicated and reside to a relatively limited set of servers,
while meta-data, i.e., their advertisements are stored throughout the
network, as servers publish the file ID's and they propagate. The server
IDs are generated in a pseudo-random manner and are location-independent,
and each published advertisement comprises the server Id -object Id pair. 

Routing is perfromed to the nearest 'neighbor' according to the name
suffix, which guarantees log_b(N) hops per message. The suffix-based
organization of names allows the neighbor table sizes to also be
logarithmically bounded, due to the route aggregation in single route
entries. The size is increased by the back-up links that are maintained in
order to deal with 'route' failures. Algorithms for dynamic insertion and
removal of nodes, node state handling and additional optimizations are
also provided. 




 

