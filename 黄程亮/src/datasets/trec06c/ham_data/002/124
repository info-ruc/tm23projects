Received: by cheltenham.cs.arizona.edu; Mon, 19 Dec 1994 12:10:20 MST
Date: Mon, 19 Dec 1994 21:10:33 +0200 (WET)
From: Zvi Lamm <mslamm@pluto.mscc.huji.ac.il>
To: icon-group@cs.arizona.edu
Subject: Backtracking is a way of thinking (was: Re: Backtracking)
Message-Id: <Pine.A32.3.91.941219210424.57729A-100000@pluto.mscc.huji.ac.il>
Mime-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Errors-To: icon-group-errors@cs.arizona.edu

The question isn't really if you can program without backtracking. Sure 
you can, all you need for programming are those little micro-code 
instructions... 
The question should be made clear: which programming constructs provide 
better tools for us to use? 

Icon is a good language since it give you some important tools that help 
you work (goal directed evaluation, generators, lists, tables etc...) It 
is important to rank the different tools by how useful they are. And I am 
sorry to conclude that since people here say they rarely use it, 
backtracking doesn't seem to be a very popular or useful tool.

I just want to emphesize that this is all part of the larger picture- 
that is what language you use and what it offers. In prolog, for example, 
bakctracking is of the essential... 
Perhapse in Icon we don't need it so much. What do we use instead? 
Lazy-lists? supension? Is this choice of other tools justified? 

These qustions I hope will be answered by some Icon gurus...

Ehud Lamm


