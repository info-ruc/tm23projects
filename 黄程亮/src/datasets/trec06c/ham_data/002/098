Received: by cheltenham.cs.arizona.edu; Fri, 9 Dec 1994 08:46:06 MST
To: icon-group-l@cs.arizona.edu
Date: Fri, 9 Dec 1994 15:27:47 GMT
From: goer@quads.uchicago.edu (Richard L. Goerwitz)
Message-Id: <1994Dec9.152747.7762@midway.uchicago.edu>
Organization: University of Chicago
Sender: icon-group-request@cs.arizona.edu
References: <1994Dec7.221649.10939@cs.sfu.ca>, <JFRIEDL.94Dec9095842@shibuya.nff.ncl.omron.co.jp>
Reply-To: goer@midway.uchicago.edu
Subject: Re: [Q] Algorithm for Regexp Subsumption
Errors-To: icon-group-errors@cs.arizona.edu

jfriedl@nff.ncl.omron.co.jp writes:

>vorbeck@cs.sfu.ca (Martin Vorbeck) writes:
>|> are there any algorithms out there for checking whether a regular
>|> expression subsumes another one, ie L(E1) is a subset of L(E2)? I have a
>|> "brute-force" solution along these lines:
>|> 
>|> 1. Compute equivalent finite automatas A1 (resp A2) for E1 (resp E2).
>
>Make sure you keep the context of your problem (whetever that might be)
>in mind when doing this.

To be sure.  If you create a new DFA, L(E1) or L(E2), then the if you
remove extra states correctly you should end up with the same DFA when
your done if in fact L(E1) is a subset of L(E2).  So in many computa-
tional contexts, the question of whether one is a subset or not is not
important.  Put more succinctly, the regexp a|a* is going to result in
the same DFA as a*, if done "by the book."

-- 

   -Richard L. Goerwitz              goer@midway.uchicago.edu
    sorry, no witty saying

