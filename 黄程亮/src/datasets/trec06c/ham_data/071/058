Received: from math.psu.edu (leibniz.math.psu.edu [146.186.130.2])
	by cse.psu.edu (8.8.8/8.8.8) with ESMTP id TAA02725
	for <9fans@cse.psu.edu>; Fri, 1 Sep 2000 19:34:16 -0400 (EDT)
Received: from weyl.math.psu.edu (weyl.math.psu.edu [146.186.130.226])
	by math.psu.edu (8.9.3/8.9.3) with ESMTP id TAA21865
	for <9fans@cse.psu.edu>; Fri, 1 Sep 2000 19:34:15 -0400 (EDT)
Received: from localhost (viro@localhost)
	by weyl.math.psu.edu (8.9.3/8.9.3) with ESMTP id TAA09220
	for <9fans@cse.psu.edu>; Fri, 1 Sep 2000 19:34:14 -0400 (EDT)
X-Authentication-Warning: weyl.math.psu.edu: viro owned process doing -bs
Date: Fri, 1 Sep 2000 19:34:14 -0400 (EDT)
From: Alexander Viro <viro@math.psu.edu>
To: 9fans@cse.psu.edu
Subject: Re: [9fans] FreeBSD 4.0 / Plan9 3rd ed.
In-Reply-To: <200009012258.SAA02080@cse.psu.edu>
Message-ID: <Pine.GSO.4.10.10009011908150.6688-100000@weyl.math.psu.edu>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Sender: owner-9fans@cse.psu.edu
Precedence: bulk
Reply-To: 9fans@cse.psu.edu



On Fri, 1 Sep 2000 forsyth@caldo.demon.co.uk wrote:

> >>thread==process. There is a rfork() equivalent (clone(2)) and model is
> >>exactly the same as on Plan 9 (process as a set of components that can be
> >>shared between several processes; fork() as a special case of more generic
> 
> no it is not equivalent.
> would that it were.

You can have multiple stacks. If anything, work by ESP is better than by
TSS. "Current stack pointer" makes sense on most of architectures. TSS
doesn't.

Lack of stack-splitting is not an accident - stack is not a magic object.
It's just an anonymous mapping with MAP_GROWSDOWN in flags.
<checks the manpage>
<damn>
OK, so it's time for patch to mmap.2. Omitted piece being:

	MAP_GROWSDOWN	created mapping will behave like a stack - grow
			downwards upon pagefaults. Stacks are not
			special in any respects - they are nothing but
			anonymous mappings that can grow.

Sorry. That makes my original reaction somewhat over-the-top. Umhm...
OK, I'll look through the thing (drawterm, that is) and try to see what
can be done.

Anyway, TSS hack is doomed - it's not going to work on 2.4. We used to
allocate a separate TSS for each task, but that essentially forced a TLB
flush upon every context switch. And it hurts a lot. Current kernel has a
TSS per CPU and does needed updates by hands - it turned out to be faster
than jump on TSS. So something has to be done anyway. Yes, 2.4 is not
released yet, but you can be 100% sure that this change will not be
reverted.


