Received: from lugnet.com (lugnet.com [209.68.63.236])
	by aleve.media.mit.edu (8.9.3/8.9.3/+ALEVE) with ESMTP id NAA28890
	for <handyboard@media.mit.edu>; Thu, 12 Oct 2000 13:57:09 -0400 (EDT)
Received: (from lugnet@localhost) by lugnet.com (8.9.1/8.6.12) id NAA29747; Thu, 12 Oct 2000 13:57:07 -0400 (EDT)
X-Envelope-To: handyboard@media.mit.edu
X-Loop: lugnet.robotics.handyboard@lugnet.com
X-Message-Archive: http://news.lugnet.com/news/display.cgi?lugnet.robotics.handyboard:8123
From: "Richard F. Drushel" <drushel@apk.net>
X-Real-Life-Name: Richard F. Drushel
Sender: news-gateway@lugnet.com
Errors-To: news-errors@lugnet.com
To: handyboard@media.mit.edu
Subject: revised msleep() function for standard IC library
Posted-Date: Thu, 12 Oct 2000 17:56:28 GMT
Date: Thu, 12 Oct 2000 17:56:28 GMT
Organization: Coleco ADAM Online, Ltd.
Message-Id: <G2BwI4.Mtr@lugnet.com>
Content-Type: text/plain; charset=iso-8859-1
Content-Transfer-Encoding: 8bit
Precedence: list

        Based upon a student suggestion in our Autonomous Robotiics course
Subject: revised msleep() function for standard IC library
here at CWRU, I have written a new, multitasking-friendlier version of the
msleep() function.  The old version was a CPU-intensive busy loop.  The new
version does an immediate defer() if the sleep timer has not yet expired.

void msleep(long msec)
{
    /* replaced 12 October 2000 by RFD, new in v.2.67 */

    long end_time;

    end_time = mseconds() + msec;

    while (mseconds() < end_time)
        defer();                    /* this is the key change; */
                                    /* no foreground busy-wait */
}

Benchmark tests in a 6-process system (1 main(), 4 operating motors with
0.5 second sleeps between each command, 1 incrementing a long counter)
showed 300% more throughput for the counter process, with 30% of the
over-sleep error time, compared to the old version.  That is, over a fixed
operating time interval, non-sleeping processes were able to do 3x more
work, and the error in the times spent sleeping (always an overage, as the
sleep is a *minimum* time) was only 1/3 as great.  For sensor-intensive
multitasking programs, this is a significant improvement.  For single-tasking
programs, there does not appear to be significant additional overhead.

        For Handy Board systems, replace the code in lib_hb.c (or equivalent).
For 6.270 systems, replace the code in lib_r22.c (or equivalent).

        Comments and bug reports are welcome.

        *Rich*

