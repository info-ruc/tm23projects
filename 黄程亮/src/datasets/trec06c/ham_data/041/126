Received: from mail-gw6.pacbell.net (mail-gw6.pacbell.net [206.13.28.41])
	by aleve.media.mit.edu (8.9.1a/8.9.1/+ALEVE) with ESMTP id PAA27610
	for <Handyboard@media.mit.edu>; Fri, 9 Apr 1999 15:57:59 -0400 (EDT)
Received: from pacbell.net (ppp-207-215-163-236.grdn01.pacbell.net [207.215.163.236]) by mail-gw6.pacbell.net (8.8.8/8.7.1+antispam) with ESMTP id MAA29648; Fri, 9 Apr 1999 12:58:11 -0700 (PDT)
Message-Id: <370E5C62.AE3CF749@pacbell.net>
Date: Fri, 09 Apr 1999 13:00:38 -0700
From: Gary Livick <glivick@pacbell.net>
X-Mailer: Mozilla 4.06 (Macintosh; I; PPC)
Mime-Version: 1.0
To: Keith Hearn <khearn@legato.com>
Cc: "Curt Mills, WE7U" <hacker@tc.fluke.com>, Handyboard@media.mit.edu
Subject: Re: GCC 2.8.1 for HC11
References: <199904091914.MAA16303@mail.Legato.COM>
Content-Type: text/plain; charset=us-ascii; x-mac-type="54455854"; x-mac-creator="4D4F5353"
Content-Transfer-Encoding: 7bit



Keith Hearn wrote:

>
> And using IC libraries works well, up until you have a new piece of
>   hardware that isn't a simple digital/analog input/output, Then you're
>   stuck. For instance, when I first got a GP2D02 I tried writing IC
>   code to use it, but IC is too slow for making those pulses that have
>   to be less than .2m-sec. So my choices were:
>
>   a) Wait for someone else to write a driver, and hope that it wasn't
>        hard-coded for their specific usage (number of sensors and which
>        ports). or...
>
>   b) Write my own driver in assembly.
>
> Barry Brouillette very kindly provided a drivers for the GP2D02, but
>   they expect to find 2 GP2D02's on specific input and output ports.
>   If I only have 1 GP2D02 (or 3 or 4), or I want to use different
>   ports, his code doesn't solve my problem.
>
> Ok, so I have to write my own driver. I can use his as an example,
>   but what do I do the next time I pick up a piece of hardware for
>   which no one has written a driver?

You can have a copy of mine if you like.  You can relocate it to any available
digital ports with ease.  It is set up for a single sensor, but you can easily add
as many as you have ports for.

>
>
> I think IC is great for people who may not have much programming
>   experience and who only want to use supported hardware. That's what
>   it's written for and it does a great job at it. But we need
>   to provide a "next step" up for those who want to delve deeper
>   (without having to go as deep as parsing schematics).

For people using the Handy Board in small robotics applications, IC is plenty in
my opinion.  I am just now trying to learn the full C language and the use of
compilers.  I know only what I picked up from using IC about the former, and
nothing about the latter.  Talk about major pain.  But what I am discovering is
that IC is adequate for probably 98% of robotics users, even when the need arises
to add strange sensors.  It's us few here addressing this thread who seem to want
more, and for what I am not quite sure.

> Yup, I agree. The HB & IC are great for students or anyone with
>   limited programming experience.

That's me.  Limited programming experience.

> Or those who just don't want to
>   twiddle the bits & bytes.

Often have to do this anyway.  I have added all kinds of stuff to my Robot,
including a second controller, voice, speech recognition, sonar and the GP2D02,
and it is all programmed in either IC or ICB.  I find the Handy Board and IC to be
great tools, even given their limits.

I am watching with great interest the work of you people in extending the upper
limits of common understanding of the HC11, and the range of tools and
documentation.  Working at your level, you are on your own.  If the information
already existed in a place where you could easily access it, you would be doing
some other impossible thing instead, so might as well enjoy this endeavor.

Gary Livick
http://www.lightwaverobotics.com


