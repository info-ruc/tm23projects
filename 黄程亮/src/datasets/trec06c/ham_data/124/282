Received: from exchfe1.cs.cornell.edu (exchfe1.cs.cornell.edu [128.84.97.27])
	by sundial.cs.cornell.edu (8.11.7-20031020/8.11.7/M-3.25) with ESMTP id k4DNG4200824
	for <egs@unix.cucs>; Sat, 13 May 2006 19:16:05 -0400 (EDT)
Received: from iago.cs.cornell.edu ([128.84.96.10]) by exchfe1.cs.cornell.edu with Microsoft SMTPSVC(6.0.3790.1830);
	 Sat, 13 May 2006 19:15:01 -0400
Received: from postoffice10.mail.cornell.edu ([132.236.56.14]) by iago.cs.cornell.edu with Microsoft SMTPSVC(6.0.3790.1830);
	 Sat, 13 May 2006 19:14:57 -0400
Received: from webmail.cornell.edu (hermes21.mail.cornell.edu [132.236.56.20])
	by postoffice10.mail.cornell.edu (8.12.10/8.12.6) with ESMTP id k4DNEqat012158;
	Sat, 13 May 2006 19:14:53 -0400 (EDT)
Received: from 128.84.98.245
        by webmail.cornell.edu with HTTP;
        Sat, 13 May 2006 19:14:52 -0400 (EDT)
Message-ID: <2001.128.84.98.245.1147562092.squirrel@webmail.cornell.edu>
In-Reply-To: <1923.128.84.98.245.1147557414.squirrel@webmail.cornell.edu>
References: <2537.128.84.98.245.1147406914.squirrel@webmail.cornell.edu>     
           <3469.128.84.98.245.1147411785.squirrel@webmail.cornell.edu>    
         <4952.128.84.98.245.1147484280.squirrel@webmail.cornell.edu>      
    <1157.128.84.98.245.1147492519.squirrel@webmail.cornell.edu>   
    <1255.128.84.98.245.1147497043.squirrel@webmail.cornell.edu>
    <1923.128.84.98.245.1147557414.squirrel@webmail.cornell.edu>
Date: Sat, 13 May 2006 19:14:52 -0400 (EDT)
Subject: PAPER 22
From: "Gopal Parameswaran" <gp72@cornell.edu>
To: egs+summary@cs.cornell.edu
Cc: gp72@cornell.edu
User-Agent: SquirrelMail/1.4.5
MIME-Version: 1.0
Content-Type: text/plain;charset=iso-8859-1
Content-Transfer-Encoding: 8bit
X-Priority: 3 (Normal)
Importance: Normal
X-OriginalArrivalTime: 13 May 2006 23:14:58.0069 (UTC) FILETIME=[0D600C50:01C676E3]

Implementing Declarative Overlays
In this paper the authors presents a declarative logical language P2 that
can be used to express the overlay networks and can be used to implement
them. Applications would submit to P2 a logical description of an overlay
network and P2 would generate the code needed to maintain all the data
structures associated with the network including routing tables and
perform resource discovery and forwarding features to the overall. The
authors claim that since the system is based on logical units it can be
broken down into smaller units and can be reused for coding in the future.
The advantage of this system it is felt would only be in the ease of
writing a simple system and its contribution to an actual futuristic
peer-to-peer system would be minimal in terms of performance. This system
like Macedon discussed below are good for prototyping simple systems. Also
it seems rather naïve to implement the system as a platform instead of it
as a library that would have helped in integrating it with other systems
and would have also helped others in developing extensions to the system.
This system models a lot on database query languages and though it is a
promising area the amount of support work done for the P2 system only
involves the implementation of Chord and it is assumed that other systems
can be similarly developed. The comparison chart with Chord also happens
to be for only 400 nodes and that is too minimal a node population to
provide for any significant results.

Macedon
Macedon provides a domain specific language for abstracting the high level
behavior of overlays and DHT’s for peer to peer systems and is implemented
on a wider range of systems and provides also a C++ language generated
code and though the code generated would be harder to walk through make
changes and would involve a substantial learning curve, it could be used
to generate the basic peer to peer functionalities and then the generated
code could be modified to tune the code for specific needs. This system
serves as an API over the network substrate and could be modified to
provide a library of API. However any specific changes to the network
protocols would involve as said earlier a substantial effort though it
could be added on as extensions to the existing code and would be great
for running simulations. Developing languages for peer-to-peer system
development is a great idea though the focus should be more on development
of libraries rather than languages. The Macedon API can be made on to run
on existing overlays and can be used for enhancements as shown in the
Macedon protocol stack and this serves a major development for
peer-to-peer application development. Another feature of Macedon is the
inclusion of locking mechanisms that could be used to provide a higher
level of multithreading use and it could be extended to provide for
callback functions that could allow for more specific implementation of
locking mechanisms if required by certain application developers. However
both these systems though being a major step in the development of
Peer-to-Peer system languages it still represents a process in its
infancy.


