Received: from authusersmtp.mail.cornell.edu (granite1.mail.cornell.edu [128.253.83.141])
	by sundial.cs.cornell.edu (8.11.7-20031020/8.11.7/M-3.22) with ESMTP id k2EHHot09834
	for <egs+summary@cs.cornell.edu>; Tue, 14 Mar 2006 12:17:50 -0500 (EST)
Received: from KEVSTOY (cpe-69-207-37-68.twcny.res.rr.com [69.207.37.68])
	(authenticated bits=0)
	by authusersmtp.mail.cornell.edu (8.13.1/8.12.10) with ESMTP id k2EHHneS020350
	(version=TLSv1/SSLv3 cipher=RC4-MD5 bits=128 verify=NOT)
	for <egs+summary@cs.cornell.edu>; Tue, 14 Mar 2006 12:17:49 -0500 (EST)
Message-ID: <001301c6478b$417d6140$4425cf45@KEVSTOY>
Reply-To: "Kevin" <yobz@cornell.edu>
From: "Kevin" <km266@cornell.edu>
To: <egs+summary@cs.cornell.edu>
Subject: PAPER 14
Date: Tue, 14 Mar 2006 12:18:04 -0500
MIME-Version: 1.0
Content-Type: text/plain;
	format=flowed;
	charset="iso-8859-1";
	reply-type=original
Content-Transfer-Encoding: 7bit
X-Priority: 3
X-MSMail-Priority: Normal
X-Mailer: Microsoft Outlook Express 6.00.2900.2527
X-MimeOLE: Produced By Microsoft MimeOLE V6.00.2900.2527

GNP proposes a Global Network Positioning system in order to reduce latency. 
The goal a positioning system would be to get a good estimate of 
round-trip-time to a peer without having to actually find the latency (by 
pinging them).  The accomplish this by setting up a system of servers that 
act as landmarks.  By pinging these central servers, a node can find its 
position in the coordinate system.  It works similarly to wireless 
triangulation: if you know the signal strength to several pre-determined 
wireless routers, you can determine your approximate location.  The issue 
with GNP is its central server philosophy: it has a single point of failure 
and running these servers is likely not to gain the operators anything.  If 
a server goes down, every node in the system will have to re-ping the new 
landmark server to re-tune its position in the system.

Vivaldi improves upon GNP in several ways.  First of all, it is 
decentralized.  There are no longer single points of failure in the system 
as the landmark servers are no longer servers: they are peers.  Vivaldi also 
explores several other coordinate systems and determines that a Euclidean 
coordinate system with a height vector added to it works best. The height 
vector adds more distance for the packet to travel, i.e., it has to travel 
the height then the actual distance on the plane then the height of the 
receiving node.  Their experiments showed that this worked better than other 
systems (which is interesting since it seems like there are several 
degenerated cases where it wouldn't help).  Vivaldi also shows a centralized 
algorithm to find the optimal distance by solving a spring equation.  It 
then decentralizes the algorithm and shows good results.  In the end, it 
seems as if Vivaldi has some good characteristics, but would not perform 
amazingly under periods of high churn.  They show that the system can adapt 
decently well, but it would be interesting to see how well it does in 
practice.

Meridian is another system to route location-aware packets.  Instead of 
putting every node in the system in a coordinate space, Meridian has each 
node keeps track of exponentially distance concentric rings.  A node can 
therefore keep track of the distance to any of the neighbors in these rings. 
Using a similar Pastry or Chord-like mechanism, Meridian can get its closest 
node in log(n) steps.  Each node periodically searches for a set of closer 
nodes to make sure it still has good information.  It also keeps pointers to 
lots of other nodes that it discovers through the gossip protocol.  In the 
end, Meridian outperforms both other systems.  The only downside seems to be 
the extra overhead. 

