Received: from lugnet.com (lugnet.com [209.68.63.236])
	by aleve.media.mit.edu (8.9.3/8.9.1/+ALEVE) with ESMTP id SAA09255
	for <handyboard@media.mit.edu>; Sat, 22 Jan 2000 18:42:02 -0500 (EST)
Received: (from lugnet@localhost) by lugnet.com (8.9.1/8.6.12) id SAA26711; Sat, 22 Jan 2000 18:42:02 -0500 (EST)
X-Envelope-To: handyboard@media.mit.edu
X-Loop: lugnet.robotics.handyboard@lugnet.com
X-Message-Archive: http://www.lugnet.com/news/display.cgi?lugnet.robotics.handyboard:7339
From: Christopher Prosser <cprosser@acm.org>
X-Real-Life-Name: Christopher Prosser
Sender: news-gateway@lugnet.com
Errors-To: news-errors@lugnet.com
To: handyboard@media.mit.edu
Reply-To: Christopher Prosser <cprosser@acm.org>
Subject: Re: multitasking
Posted-Date: Sat, 22 Jan 2000 23:40:25 GMT
Date: Sat, 22 Jan 2000 23:40:25 GMT
Organization: None
Message-Id: <001101bf6532$122136c0$0a4067d8@sda>
References: <For9Hu.CqH@lugnet.com>
Content-Type: text/plain; charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
Mime-Version: 1.0
Precedence: list

In my reading of it, it will just chew the cycles. Here is the routine
msleep(), used to implement sleep. See how it just does a busy wait? I wrote
a version (now gone into data heaven when my drive crashed) that would check
the time, and then give up its time slice using the function that does that
(not handy at the moment). This approach gave up accuracy, but at least gave
up the time for other processes.

void msleep(long msec)
{
    long end_time= mseconds() + msec;

    while (1) {
 /* if the following test doesn't execute at least once a second,
    msleep may not halt */
 long done= mseconds()-end_time;
 if (done >= 0L && done <= 1000L) break;
    }
}

--chris prosser


----- Original Message -----
From: "Scott harris" <scottrharris@earthlink.net>
To: <lugnet.robotics.handyboard@lugnet.com>
Sent: Saturday, January 22, 2000 1:10 PM
Subject: multitasking


> How clever is the multitasking in IC?  If I have a task that I only want
to run
> ever 10 seconds, can I just put a sleep statement at the top of the
routine?
> Will the sleep statement chew up processor cycles, or will IC realize that
it
> should defer to the next task until the sleep time is over?
>
> -Scott Harris
>

