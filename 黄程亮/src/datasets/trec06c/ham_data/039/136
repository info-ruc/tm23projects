Received: from corporate1.osec.com (host3.sdisac.com [204.253.175.3])
	by aleve.media.mit.edu (8.9.1a/8.9.1/+ALEVE) with ESMTP id OAA14959
	for <handyboard@media.mit.edu>; Mon, 15 Mar 1999 14:27:45 -0500 (EST)
Received: from osec102.erols.com by corporate1.osec.com with SMTP (Microsoft Exchange Internet Mail Service Version 5.0.1460.8)
	id GVWCHPC0; Mon, 15 Mar 1999 11:24:46 -0800
Received: by osec102.erols.com with Internet Mail Service (5.0.1457.3)
	id <GV0328GW>; Mon, 15 Mar 1999 14:30:45 -0500
Message-Id: <D1C6ABF12D15D1119A2D006097BCFD46190907@osec102.erols.com>
From: "Russell, Casey" <crussell@osec.com>
To: handyboard@media.mit.edu
Subject: INTERACTIVE C AND THE .ICB COMPILER
Date: Mon, 15 Mar 1999 14:30:44 -0500
X-Priority: 3
Mime-Version: 1.0
X-Mailer: Internet Mail Service (5.0.1457.3)
Content-Type: multipart/mixed;
	boundary="---- =_NextPart_000_01BE6EF0.69644D20"

This message is in MIME format. Since your mail reader does not understand
this format, some or all of this message may not be legible.

------ =_NextPart_000_01BE6EF0.69644D20
Content-Type: text/plain;
	charset="iso-8859-1"

Hello,

My problem lies with the downloading of a constructed .icb file created
for the .icb compiler from Newton Labs.  I have written a .asm file and
compiled it using the web page http://www.newtonlabs.com/ic/icb-200.html
.  The code compiles successfully and when I copy the associated .icb
file and try to download the code using IC 3.2 I receive this message
"Fatal internal error: Non-contiguous binrecs in concat"  then windows
informs me that an illegal operation was performed and shuts down IC.
Below is a copy of the .asm file and the .icb file.  Any help on this
matter would be greatly appreciated.  Thank You.
     


Casey Russell
Crussell@osec.com
540-663-0995


  



------ =_NextPart_000_01BE6EF0.69644D20
Content-Type: application/octet-stream;
	name="Test.icb"
Content-Disposition: attachment;
	filename="Test.icb"

S11100000000000000000000000000000000EE
S12380207F00027F0000C67ED7ECCC0000DDEDCE10001D21001C2100C602E7231C220039FD
S1238040CE1000C602E7231D2100EC12DD0C1D21001C210020337D00022724EC12930CD33F
S123806006DD06960689009706EC12930AD304DD049604890097047A000026037F0002EC30
S123808012DD0A1C21001D21003B07360F86649700CC0000DD049706DD069708C601D702F4
S12380A03206393C7E00007D000226FBD604DA06271474000476000576000674000676009D
S11680C00776000820E6DE05DC07038F8351BADD083839E2
S9030000FC
S11100000000000000000000000000000000EE
S123872B7F00027F0000C67ED7ECCC0000DDEDCE10001D21001C2100C602E7231C220039EB
S123874BCE1000C602E7231D2100EC12DD0C1D21001C210020337D00022724EC12930CD32D
S123876B06DD06960689009706EC12930AD304DD049604890097047A000026037F0002EC1E
S123878B12DD0A1C21001D21003B07360F86649700CC0000DD049706DD069708C601D702E2
S12387AB3206393C7E00007D000226FBD604DA06271474000476000576000674000676008B
S11687CB0776000820E6DE05DC07038F8351BADD083839D0
S9030000FC
6811 assembler 10-Aug-91
  original program by Motorola.
  a few modifications by Randy Sargent (rsargent@media.mit.edu)
"/tmp/runas11_12007.asm"(43): Warning --- Value Truncated
"/tmp/runas11_12007.asm"(52): Warning --- Value Truncated
"/tmp/runas11_12007.asm"(58): Warning --- Value Truncated
"/tmp/runas11_12007.asm"(74): Warning --- Value Truncated
"/tmp/runas11_12007.asm"(83): Warning --- Value Truncated
"/tmp/runas11_12007.asm"(101): Warning --- Value Truncated
"/tmp/runas11_12007.asm"(43): Warning --- Value Truncated
"/tmp/runas11_12007.asm"(52): Warning --- Value Truncated
"/tmp/runas11_12007.asm"(58): Warning --- Value Truncated
"/tmp/runas11_12007.asm"(74): Warning --- Value Truncated
"/tmp/runas11_12007.asm"(83): Warning --- Value Truncated
"/tmp/runas11_12007.asm"(101): Warning --- Value Truncated
BASE       1000 *0001 0039 0050 
CFORC      100b *0003 
GRAD       0135 *0131 
HPRIO      103c *0014 
MEAS_ON    0002 *0021 0033 0069 0097 0122 0135 
MEAS_TEMP  0000 *0132 
MEAS_TEMP0 87b2 *0135 0136 
MEAS_TEMP1 87b7 *0137 0146 
MEAS_TEMP2 87d1 *0148 0139 
OC1D       100d *0005 
OC1M       100c *0004 
PERIODSTART 000a *0027 0084 0102 
PERIODSUM  0004 *0022 0085 0086 0087 0089 0117 0118 0137 0140 0141 
                      0142 0148 
PORTA      1000 *0002 
SENSORINT  0000 *0049 0037 
SENSORINT1 0000 *0068 
SENSORINT4 878a *0101 0070 0093 
SENSORINT9 8794 *0107 0064 
SIGNALSUM  0006 *0023 0076 0077 0078 0080 0119 0120 0138 0143 0144 
                      0145 0149 
STARTMEAS  0000 *0110 0134 
STARTTIME1 000c *0028 0059 0075 
STILL_TO_DO 0000 *0020 0034 0092 0115 
SUBROUTINE_GET_DERGRESS_C 87da *0153 
SUBROUTINE_INITIALIZE_MODULE 872b *0032 
TCNT       100e *0006 
TCTL1      1020 *0010 
TCTL2      1021 *0011 0040 0041 0053 0062 0063 0105 0106 
TFLG1      1023 *0013 0043 0052 
TIC2       1012 *0007 0058 0074 0083 0101 
TIC2INT    00ec *0015 0036 0038 
TIC3       1014 *0008 
TIC3INT    00ea *0016 
TMSK1      1022 *0012 0044 
TOC3       101a *0009 
TOC4INT    00e2 *0017 
VARIABLE_DEGRESS_C 0008 *0024 0154 


------ =_NextPart_000_01BE6EF0.69644D20
Content-Type: text/plain;
	name="COMBO1.ASM.txt"
Content-Transfer-Encoding: quoted-printable
Content-Disposition: attachment;
	filename="COMBO1.ASM.txt"

BASE			EQU	$1000
PORTA		        EQU	$1000		* Port A data register
CFORC		        EQU	$100B		* Timer Compare Force Register
OC1M			EQU	$100C		* Output Compare 1 Mask register
OC1D			EQU	$100D		* Output Compare 1 Data register
TCNT			EQU	$100E		* Timer Count Register
TIC2			EQU	$1012		* Timer Input Capture register 2
TIC3			EQU	$1014		* Timer Input Capture register 3
TOC3			EQU	$101A		* Timer Output Compare register 3
TCTL1			EQU	$1020		* Timer Control register 1
TCTL2			EQU	$1021		* Timer Control register 2
TMSK1		        EQU	$1022		* main Timer interrupt Mask register 1
TFLG1		        EQU	$1023		* main Timer interrupt Flag register 1
HPRIO		        EQU	$103C		* Highest Priority Interrupt and misc
TIC2INT		        EQU	$EC			* Timer Input Capture 2
TIC3INT		        EQU	$EA			* Timer Input Capture 3
TOC4INT		        EQU	$E2			* Timer Input Capture 4

************DATA ARE FOR THE TEMPERATURE MEASUREMENT**************
STILL_TO_DO 		FDB	0					'NUMBER OF PERIODS TO ACCUMULATE
MEAS_ON			FDB	0					'FLAG INDICATES MEASUREMENT RUNNING
PERIODSUM		FDB	0					'ACCUMULATES PERIOD TIMES
SIGNALSUM		FDB	0					'ACCUMULATESHIGH TIME OF THE SIGNAL
VARIABLE_DEGRESS_C 	FDB	0					'VARIABLE RETURNED TO IC

************STORAGE FOR INTERNAL USE******************************
PERIODSTART	FDB	0					'STARTING TIME OF A PERIOD
STARTTIME1	FDB	0					'TIME AT WHICH THE SIGNAL BECAME HIGH

************INITIALIZATION OF THE TEMPERATURE MEASURMENT*********
		ORG	MAIN_START
SUBROUTINE_INITIALIZE_MODULE:
		CLR	MEAS_ON
		CLR	STILL_TO_DO				'NO MEASUREMENT ACTIVE
                LDAB    #$7E	=09
                STAB	TIC2INT
                LDD	#SENSORINT		        'INITIALIZE THE INTERRUPT =
VECTOR
		STD	TIC2INT+1
		LDX	#BASE					'START MEASURING ON A FALLING EDGE
		BCLR	TCTL2,X,$04
		BSET	TCTL2,X,$08
		LDAB	#$02					'CLEAR POSSIBLY PENDING INTERRUPT
		STAB 	TFLG1,X
		BSET	TMSK1,X,$02
		RTS           				'END OF INITIALIZATION

*************SUBROUTINES FOR TEMPERATURE MEASUREMENT*************
*************INPUT CAPTURE INTERRUPT ROUTINE**********************
SENSORINT       EQU     $
		LDX	#BASE					'LET IX POINT AT I/O REGISTERS
		LDAB	#$02					'RESET THE INTERUPT FLAG
		STAB	TFLG1,X
		BCLR	TCTL2,X,$04,SENSORINT1	        'FIND IF IT WAS RISING OR FALLING =
EDGE

*************IF IT IS A RISING EDGE, IN THE MIDDLE OF**************
*************A MEASURMENT, MAKE NOTE OF THE TIME AT **************
*************WHICH THE EDGE OCCURED*******************************
		LDD 	TIC2,X
		STD	STARTTIME1

*************THEN WAIT FOR A FALLING EDGE*************************
		BCLR	TCTL2,X,$04
		BSET	TCTL2,X,$08
		BRA	SENSORINT9

*************IF IT IS A FALLING EDGE, AT THE END OF A PERIOD.*****
*************THE END OF A PERIOD IS A START OF ANOTHER***********
SENSORINT1      EQU     $
		TST  	MEAS_ON				'CHECK IF THE MEASUREMENT SHOULD BE TAKEN
		BEQ	SENSORINT4

*************WHEN THE MEASUREMENT MUST BE TAKEN: *****************
*************ACCUMULATE THE TOTAL TIME THE SIGNAL WAS HIGH********
		LDD	TIC2,X
 		SUBD	STARTTIME1
		ADDD	SIGNALSUM + 1
		STD	SIGNALSUM + 1
		LDAA	SIGNALSUM
		ADCA 	#0
		STAA	SIGNALSUM

*************ACCUMMULATE THE TOTAL PERIOD TIME********************
		LDD	TIC2,X
		SUBD 	PERIODSTART
		ADDD 	PERIODSUM + 1
		STD	PERIODSUM + 1
		LDAA	PERIODSUM
		ADCA	#0
		STAA	PERIODSUM

*************ONE MORE PERIOD DONE, ONE LESS TO DO****************
		DEC	STILL_TO_DO
		BNE 	SENSORINT4

*************IF NO MORE PERIODS HAVE TO BE MEASURED, THE*********
*************MEASUREMENT IS READY********************************
		CLR	MEAS_ON

*************MAKE A NOTE OF THE TIME AT WHICH THE ***************
*************NEW PERIOD STARTED**********************************
SENSORINT4	LDD	TIC2,X
		STD	PERIODSTART

*************WAITING FOR A RISING EDGE***************************
		BSET	TCTL2,X,$04
		BCLR	TCTL2,X,$08
SENSORINT9	RTI

*************STARTS A MEASUREMENT OF 100 PERIODS******************
STARTMEAS	EQU     $
		TPA						'SAVE THE CONDITION CODE REGISTER ON THE STACK
		PSHA						'(USING A)
		SEI						'TEMPORARILY BLOCK THE INTERRUPTS
		LDAA	#100		=20
		STAA	STILL_TO_DO
		LDD	#0
		STD	PERIODSUM				'CLEAR THE RESULTS
		STAA	PERIODSUM+2
		STD	SIGNALSUM
		STAA	SIGNALSUM+2
		LDAB	#1					'START THE MEASUREMENT
		STAB	MEAS_ON
		PULA						'RETRIEVE THE CONDITION-CODE REGISTER
		TAP						'FROM THE STACK (USING A)
		RTS

*************ROUTINES FOR USE BY THE MAIN PROGRAM******************

*************MEASURE THE TEMPERAURE, AND LEAVE THE RESULT IN D.******
*************THIS RESULT IS THE NUMBER OF DEGREES IN CELCIUS x 309**	=09
GRAD		EQU	309
MEAS_TEMP	EQU	$
		PSHX						'SAVE IX ON THE STACK
		JMP	STARTMEAS				'START A MEASUREOF 256 PERIODS
MEAS_TEMP0	TST	MEAS_ON				'WAIT UNTIL MEASUREMENT IS READY
		BNE	MEAS_TEMP0
MEAS_TEMP1	LDAB	PERIODSUM				'SCALE BOTH TIMES BACK TO VALUES THAT
		ORAB	SIGNALSUM				'THAT WILL FIT IN 16 BITS
		BEQ	MEAS_TEMP2				'DO THIS BY DIVIDING BOTH VALUES BY 2
		LSR	PERIODSUM				'UNTIL BOTH ARE WITHIN THE 16-BIT RANGE
		ROR	PERIODSUM+1
		ROR	PERIODSUM+2
		LSR	SIGNALSUM
		ROR	SIGNALSUM+1
		ROR	SIGNALSUM+2
		BRA	MEAS_TEMP1

MEAS_TEMP2	LDX	PERIODSUM+1
		LDD 	SIGNALSUM+1
		FDIV						'CALCULATE THE DUTY-CYCLE
		XGDX						'PUT THE RESULT INTO D
		SUBD	#20922					'THEN CORRECT (SEE EXPLANATION IN HANDBOOK)
SUBROUTINE_GET_DERGRESS_C:
		STD	VARIABLE_DEGRESS_C	=09
                PULX						'RETRIEVE IX FROM THE STACK
		RTS


------ =_NextPart_000_01BE6EF0.69644D20--

