Received: from cyberus.ca (mail.cyberus.ca [209.195.95.1])
	by aleve.media.mit.edu (8.8.7/ML970927) with ESMTP id VAA07908
	for <handyboard@media.mit.edu>; Sun, 1 Nov 1998 21:21:23 -0500 (EST)
Received: from cyberus.cyberus.ca (ip110.ts3.mn.dialup.ottawa.cyberus.ca [209.195.84.110]) by cyberus.ca (8.8.8/Cyberus Online Inc) with SMTP id VAA18067; Sun, 1 Nov 1998 21:21:01 -0500 (EST)
From: "Darkman" <lroska@cyberus.ca>
To: "edmund" <ho106@singnet.com.sg>, "Eric Noyau" <noyau@apple.com>
Cc: <handyboard@media.mit.edu>
Subject: Re: programming help.
Date: Sun, 1 Nov 1998 21:22:55 -0500
Message-Id: <01be0607$b35b5ec0$6e54c3d1@cyberus.cyberus.ca>
Mime-Version: 1.0
Content-Type: text/plain;
	charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
X-Priority: 3
X-Msmail-Priority: Normal
X-Mailer: Microsoft Outlook Express 4.71.1712.3
X-Mimeole: Produced By Microsoft MimeOLE V4.71.1712.3

The "<<" is a shift left operator in C
0E is the actual motor port on the Handy Board.


>At 10:34 AM 10/31/98 , Edmund wrote:
>>
>> hello
>>
>>       can someone please tell me what does the following command line
mean?
>>
>>       bit_set(0x0e, 1 << (4 + motor));
>>
>>       i know that 0x0e refers to memory location $0E but how does bit_set
>>       work? is it similar to poke? and more importantly, what operation
>>       does '1 << (4 + motor)' perform?
>>
>>       any help will be appreciated. thanks.
>>
>>
>
>In binary 1 is represented by  0000-0001
>
>1 << 1 is 0000-0010 aka 2
>1 << 2 is 0000-0100 aka 4
>1 << 3 is 0000-1000 aka 8
>
>You get the idea? x << y means slide x to the left y times.
>
>motor is probably a number between 0 and 3. 4+motor is then a number
between 4 and 7.
>
>so, to go back to your example the result of  1<<(4+motor) is one of:
>
>1000-0000
>0100-0000
>0010-0000
>0001-0000
>
>And my guess is that bit_set(address, value) is equivalent to poke(address,
peek(address) | value). I don't have any documentation here, so I don't know
what is stored in 0x0e, but it could be the place where you turn the motors
on and off. And the code you are looking at is turning a motor on without
touching the other motors.
>
>
>-- Eric
>


