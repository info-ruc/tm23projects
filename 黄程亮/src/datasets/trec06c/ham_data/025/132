Received: from Hydro.CAM.ORG (Hydro.CAM.ORG [198.168.100.7])
	by aleve.media.mit.edu (8.8.7/ML970927) with ESMTP id WAA16888
	for <handyboard@media.mit.edu>; Thu, 29 Oct 1998 22:34:33 -0500 (EST)
Received: from cam.org (mdavies.HIP.CAM.ORG [199.84.42.249])
          by Hydro.CAM.ORG (8.8.8/8.8.4) with ESMTP
	  id WAA09100; Thu, 29 Oct 1998 22:33:49 -0500 (EST)
Message-Id: <363933A7.25A923B6@cam.org>
Date: Thu, 29 Oct 1998 22:34:00 -0500
From: Max Davies <mdavies@CAM.ORG>
X-Mailer: Mozilla 4.5b2 [en] (Win95; I)
X-Accept-Language: en
Mime-Version: 1.0
To: Rajbala Makar <makarraj@cse.msu.edu>
Cc: handyboard@media.mit.edu
Subject: Re: IR Detection
References: <199810300049.TAA23888@asterix.cse.msu.edu>
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

Transmission and reception of IR data is quite different from using IR just to
bounce it off obstacles to detect their presence.  To exchange data with IR you
will almost certainly have to use interrupt driven assembler code which can be
very difficult.  There are so many variables at play that when you first try it
and it doesn't work you have no idea where to look:  is it the transmitting
hardware, the transmitting software, the receiving hardware, or the receiving
software?

My best suggestion is to start from a known working base.  Choose a remote
control that you have at home that works with your TV or VCR or whatever.  Next
get your Handyboard to recognize signals from that remote perfectly.  Then get
your Handyboard to successfully send those same signals to the TV/VCR.  Then put
exactly the same code into your second HB and proove it can do the same thing.
>From there on it should be a piece of cake to send IR data from one to the other
because you have already prooven that their hardware and low-level software are
working correctly.

My Handyboard IR routines at http://WWW.CAM.ORG/~mdavies/HB/ir.htm should help
you a lot, making it unnecessary for you to write any additional assembler code.

/Max




