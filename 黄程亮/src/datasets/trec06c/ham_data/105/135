Received: from interval.louisiana.edu (daemon@localhost [127.0.0.1])
	by interval.louisiana.edu (8.13.1/8.13.4/ull-interval-math-majordomo-1.5) with ESMTP id j7JHpIHu011539
	for <reliable_computing-outgoing@interval.louisiana.edu>; Fri, 19 Aug 2005 12:51:19 -0500 (CDT)
Received: (from daemon@localhost)
	by interval.louisiana.edu (8.13.1/8.13.4/Submit) id j7JHpIbE011538
	for reliable_computing-outgoing; Fri, 19 Aug 2005 12:51:18 -0500 (CDT)
Received: from duke.poly.edu (root@duke.poly.edu [128.238.2.92])
	by interval.louisiana.edu (8.13.1/8.13.4/ull-interval-math-majordomo-1.5) with ESMTP id j7JHp5l4011534
	for <reliable_computing@interval.louisiana.edu>; Fri, 19 Aug 2005 12:51:14 -0500 (CDT)
Received: from [128.238.241.210] ([128.238.241.210])
	by duke.poly.edu (8.13.1/8.13.1) with ESMTP id j7JHooiN023524;
	Fri, 19 Aug 2005 13:50:50 -0400 (EDT)
Mime-Version: 1.0 (Apple Message framework v734)
Content-Type: text/plain; charset=ISO-8859-1; delsp=yes; format=flowed
Message-Id: <D63D0138-DA69-48F0-9F80-59358085AF99@poly.edu>
Cc: =?ISO-8859-1?Q?Herv=E9_Br=F6nnimann?= <hbr@poly.edu>,
        Sylvain Pion <Sylvain.Pion@sophia.inria.fr>,
        Guillaume Melquiond <gmelquio@ens-lyon.fr>
Reply-To: =?ISO-8859-1?Q?Herv=E9_Br=F6nnimann?= <hbr@poly.edu>,
        Sylvain Pion <Sylvain.Pion@sophia.inria.fr>,
        Guillaume Melquiond <gmelquio@ens-lyon.fr>
From: =?ISO-8859-1?Q?Herv=E9_Br=F6nnimann?= <hbr@poly.edu>
Subject: C++ Standardization of intervals
Date: Fri, 19 Aug 2005 13:50:51 -0400
To: reliable_computing@interval.louisiana.edu, interval@listserv.utep.edu
X-Mailer: Apple Mail (2.734)
X-Virus-Scanned: ClamAV version devel-20050712, clamav-milter version 0.85i on duke.poly.edu
X-Virus-Status: Clean
Content-Transfer-Encoding: 8bit
X-MIME-Autoconverted: from quoted-printable to 8bit by interval.louisiana.edu id j7JHpFl4011535
Sender: owner-reliable_computing@interval.louisiana.edu
Precedence: bulk

Dear fellow intervalers:

As you may know, we (G. Melquiond, S. Pion, and myself) have been  
following Jens Maurer's footsteps in providing a C++ implementation  
of intervals. This has resulted in the C++ Boost.Interval library,  
which was accepted three years ago after a thorough public review  
into Boost. The URL is:

   http://boost.org/libs/numeric/interval/doc/interval.htm

One of the goals of the Boost.Interval library was standardization.   
We hope that by standardization, we will create opportunities for  
better optimizations directly in the C++ compilers.  The overall  
benefit, should the proposal be accepted, is that an efficient and  
optimized implementation of intervals would ship with most C++  
compilers, in the same way as the class templates complex and  
valarray already do, and as interval already does with the Sun compiler.

We are now preparing a proposal for the C++ ISO Standard. We have of  
course had to make a few choices, but by and large, our approach has  
been to make reasonable and conservative choices to limit the  
Boost.Interval library (which allows all kinds of behaviors through a  
policy-based design).  I copy-paste the design overview below. This  
is of course a very succinct statement, but it reflects most of the  
design choices. The devil may be in the details, but in the broad  
design, we have carefully taken into account the Interval FAQ, the  
existing Sun implementation, and the discussions.  The full  
preliminary proposal and code is accessible from Sylvain Pion's web  
page:

     http://www-sop.inria.fr/geometrica/team/Sylvain.Pion/cxx/

We have already had some comments. If there are enough comments, we  
would try to issue a revision before the next C++ standardization  
meeting (October, in accordance with the Fall calendar of the C++  
committee), where we will defend the proposal.

We would like to get your feedback, and want to assure you that we  
are committed in getting the best proposal possible, both in terms of  
performance, design, and consensus.  Also, it is important that you  
provide your vocal support (tell us, write a formal letter of  
support, etc.) if you would like to see the proposal accepted.  We  
would like to offer the C++ committee the assurance that the proposal  
has the wide support from the interval community.

Please reply to all three of us (we're in the Cc list) as well as to  
the interval list.

Yours,
--
Hervé Brönnimann
CIS, Polytechnic University
hbr@poly.edu



Excerpt from the design overview [for information only; for  
discussions, please try and read the whole proposal before commenting]


> The basic design aims at introducing a single class template  
> {interval<T>} which guarantees the inclusion property.  Like  
> {complex<T>}, we decided to support the three built-in floating  
> point types and leave the rest unspecified. We decided to support  
> empty intervals, because they can be integrated easily into the  
> proposal. We decided to support equality and relational comparisons  
> that extend the comparisons on the base type {T}. This implies  
> dealing with comparisons of empty or overlapping intervals. Both  
> can be made to work very naturally by also providing an  
> {interval<bool>} as the result of such comparisons, and exceptions  
> can be avoided up to this level. In this way, we are supporting  
> both the certainly-less-than and possibly-less-than comparison  
> models. In order to use comparisons in conditionals, a conversion  
> from {interval<bool>} to {bool} is provided, and only at that level  
> is an exception thrown, when it involves an empty or indeterminate  
> boolean interval.  The behavior on out-of-domain argument values  
> (in {sqrt}, for instance) is a silent and no-exception behaviour,  
> which returns the empty interval.
>
>









