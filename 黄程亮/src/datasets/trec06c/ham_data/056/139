Received: from MIT.EDU (SOUTH-STATION-ANNEX.MIT.EDU [18.72.1.2])
	by aleve.media.mit.edu (8.9.1a/8.9.1/+ALEVE) with SMTP id MAA21729
	for <handyboard@media.MIT.EDU>; Sun, 14 Nov 1999 12:23:22 -0500 (EST)
Received: from GRAND-CENTRAL-STATION.MIT.EDU by MIT.EDU with SMTP
	id AA15316; Sun, 14 Nov 99 12:23:20 EST
Received: from melbourne-city-street.MIT.EDU (MELBOURNE-CITY-STREET.MIT.EDU [18.69.0.45])
	by grand-central-station.MIT.EDU (8.9.2/8.9.2) with ESMTP id MAA04515;
	Sun, 14 Nov 1999 12:23:21 -0500 (EST)
Received: from l-slide.mit.edu (L-SLIDE.MIT.EDU [18.54.0.44])
	by melbourne-city-street.MIT.EDU (8.9.3/8.9.2) with ESMTP id MAA29578;
	Sun, 14 Nov 1999 12:23:20 -0500 (EST)
Received: (from bendavis@localhost) by l-slide.mit.edu (8.9.3)
	id MAA27145; Sun, 14 Nov 1999 12:23:20 -0500 (EST)
Date: Sun, 14 Nov 1999 12:23:20 -0500 (EST)
Message-Id: <199911141723.MAA27145@l-slide.mit.edu>
From: Ben Davis <bendavis@MIT.EDU>
To: bachman@anatek.mv.com
Cc: handyboard@media.MIT.EDU
Subject: mixing variable types in IC


Hi John-

You can convert quantities from one data type to another
 (it's called "casting", I believe).
The following computes the quantity x/y, then converts it
 to a float:

-------------------------

int x, y;
float c;

float divide ( int x, int y)
{
        c = (float) (x/y);
        return c;
}

---------------------------

cheers,
--ben


>
> Now that I got past my nested function problem I have discovered that
> IC does not like mixing variable types.  For instance, this results in
> an error:
>
>
> int x, y;
> float c;
>
> float divide ( int x, int y)
> {
>         c = (x/y);
>         return c;
> }
>

