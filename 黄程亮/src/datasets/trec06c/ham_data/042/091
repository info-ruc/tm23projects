Received: from aragorn.csb.yale.edu (aragorn.csb.yale.edu [130.132.17.179])
	by bofur.csb.yale.edu (8.8.7/8.8.5) with ESMTP id QAA13088
	for <course@bofur.csb.yale.edu>; Sun, 18 Apr 1999 16:06:30 -0400
Received: from pantheon-po03.its.yale.edu (pantheon-po03.its.yale.edu [130.132.143.34])
	by aragorn.csb.yale.edu (8.9.1/8.9.1) with ESMTP id QAA19900
	for <course@aragorn.csb.yale.edu>; Sun, 18 Apr 1999 16:05:43 -0400 (EDT)
Received: from mars.its.yale.edu (amd33@mars.its.yale.edu [130.132.143.37])
	by pantheon-po03.its.yale.edu (8.8.8/8.8.8) with ESMTP id QAA16847
	for <course@aragorn.csb.yale.edu>; Sun, 18 Apr 1999 16:05:41 -0400 (EDT)
Received: from localhost (amd33@localhost)
	by mars.its.yale.edu (8.8.8/8.8.8) with SMTP id QAA06453
	for <course@aragorn.csb.yale.edu>; Sun, 18 Apr 1999 16:05:39 -0400 (EDT)
X-Authentication-Warning: mars.its.yale.edu: amd33 owned process doing -bs
Date: Sun, 18 Apr 1999 16:05:39 -0400 (EDT)
From: Amar Drawid <amar.drawid@yale.edu>
X-Sender: amd33@mars.its.yale.edu
To: course@aragorn.csb.yale.edu
Subject: Re: Dynamic Programming
In-Reply-To: <E10YxJH-0006og-00@daimler.ivy69.net>
Message-ID: <Pine.GSO.3.94.990418155029.28473B-100000@mars.its.yale.edu>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII

I found some more interesting things about dynamic programming that I
would like to add to Mike's message. They are from the book
"Intorduction to Algorithms" by Cormen, Leiserson, Rivest (The MIT Press,
McGraw-Hill Book Company, 1990):

""Programming" in this context refers to a tabular method, not to writing
computer code.... Divide-and-conquer algorithms partition the problem into
independent subproblems, solve the subproblems recursively, and then
combine their solutions to solve the original problem. In contrast,
dynamic programming is applicable when the subproblems are not
independent, that is, when subproblems share subsubproblems. In this
context a divide-and-conquer algorithm does more work than necessary,
repeatedly solving the common subsubproblems. A dynamic-programming
algorithm solves every subsubproblem just once and then saves its answer
in a table..."

This first made me more confused than before. But when I thought of a
combinatorial problem (like the one we did in class), and tried to apply
the normal divide-and-conquer method to it, I realized how dyn.prog. would
work in it but div-n-conq would fail.

Dynamic programming rules :)

Amar

