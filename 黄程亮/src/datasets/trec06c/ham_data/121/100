Received: from postoffice10.mail.cornell.edu (postoffice10.mail.cornell.edu [132.236.56.14])
	by sundial.cs.cornell.edu (8.11.7-20031020/8.11.7/M-3.25) with ESMTP id k3BFOB200164
	for <egs+summary@cs.cornell.edu>; Tue, 11 Apr 2006 11:24:11 -0400 (EDT)
Received: from webmail.cornell.edu (hermes21.mail.cornell.edu [132.236.56.20])
	by postoffice10.mail.cornell.edu (8.12.10/8.12.6) with ESMTP id k3BFO9Ow022711
	for <egs+summary@cs.cornell.edu>; Tue, 11 Apr 2006 11:24:10 -0400 (EDT)
Received: from 128.84.154.13 (proxying for unknown)
        by webmail.cornell.edu with HTTP;
        Tue, 11 Apr 2006 11:24:10 -0400 (EDT)
Message-ID: <54808.128.84.154.13.1144769050.squirrel@webmail.cornell.edu>
Date: Tue, 11 Apr 2006 11:24:10 -0400 (EDT)
Subject: PAPER 20
From: "Nicholas S Gerner" <nsg7@cornell.edu>
To: egs+summary@cs.cornell.edu
User-Agent: SquirrelMail/1.4.5
MIME-Version: 1.0
Content-Type: text/plain;charset=iso-8859-1
Content-Transfer-Encoding: 8bit
X-Priority: 3 (Normal)
Importance: Normal

Scribe is a multicast system supporting a large number of multicast
groups, large number of members per group, layered on Pastry.  Groups in
scribe are addressed by a groupid, the root of which is the node whose
nodeid is numerically closest to groupid.  The multicast tree created for
a group is the union of all routing paths from leaves to root in Pastry. 
In this way the tree leverages Pastry for construction and maintenance. 
During construction nodes route a join message to the root.  The join
message is suppressed at the first node already in the routing tree. 
Nodes receiving the message not already in the tree become forwarders for
the tree and will subsequently supress join messages.  To multicast
messages to the group a node addresses the root of the group which
disseminates the message along the tree.  Because nodes might fail, Scribe
provides best-effort delivery, so some messages may be lost or delivered
out of order.  Applications can build more reliability on top of Scribe. 
Scribe additionally provides two algorithms to help remove bottlenecks
(overloaded nodes) from the tree.  Such nodes off-load children to their
children (trading off the length of the child's path for better load
balance).  One weakness of Scribe is that, by default, it doesn't support
many small groups as well as it does a smaller number of large groups. 
Such groups produce deep trees with little branching.  Scribe addresses
these by collapsing paths which do not branch at nodes which do not
participate in the group.  In this way Scribe supports many long-lived
groups for large numbers of group members.  Scribe is targeted at groups
of at least eleven members, up to 100,000 or more members.  Pastry
automatically repairs failures in the trees (at the root or otherwise). 
However, the roots of such trees still represent a single point of
byzantine failure.  If such a node is chosen randomly it could suppress or
manufacture faulty messages which affects all members of the tree for all
messages.  Additionally the groups must be created ahead-of-time and
members must elect to join the group.  While this may not be a
heavy-weight operation compared to the savings of multi-cast, ad-hoc or
one-use groups will not perform as well as longer-lived groups.

Sienna is a publish-subscribe system supporting complex pub-sub semantics.
 Sienna is built into a network of servers supporting the semantics. 
Clients connect to local access points and provide advertisements
describing what they might publish describing attributes and valid values
for those attributes.  Similarly, clients can provide subscriptions
describing attributes and values for those attributes for which the client
is interested.  Sienna adheres to two principles: notifications should be
routed as close as possible to desintations without duplicates and filters
(defined by subscriptions) should be applied as close as possible to
sources.  These principles minimize the amount of redundant network
traffic.  Sienna also supports matching patterns which are sequences of
filters or compound subscriptions defining a sequence of notifications for
which the subscriber is interested.  These semantics allows subscribers to
express subscriptions on notification sequences over time (such as "two
failed login attempts followed by a change to the password file").  Sienna
servers factor these compound subscriptions into elementary subscriptions
(at the coarsest grain possible given known advertisements) and forward
these to other servers which have matching advertisements.  A monitor is
then started at the server which keeps state about notifications in order
to match sequences of notifications.  In this way filters and monitors can
be applied as far upstream as possible and messages can be sent as far
downstream without duplication.  While Sienna provides an expressive
pub-sub language it does not consider the many systems issues explored by
Scribe and addressed by Pastry.  The cost per notification per interested
party in Sienna is shown to scale sub-linearly with the number of
interested parties, but this should be expected from a multicast system. 
An important comparison is to some notion of optimal or an alternative
routing scheme (such as IP-multicast).





