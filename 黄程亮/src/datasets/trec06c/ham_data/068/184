Received: from mail.montana.com (mailA.montana.com [199.2.139.116])
	by aleve.media.mit.edu (8.9.3/8.9.3/+ALEVE) with ESMTP id KAA17831
	for <handyboard@media.mit.edu>; Fri, 2 Jun 2000 10:27:29 -0400 (EDT)
Received: from e2egolf.com (golfswit.montana.com [208.23.167.3])
	by mail.montana.com (8.10.1/8.9.3) with ESMTP id e52ESFf25696
	for <handyboard@media.mit.edu>; Fri, 2 Jun 2000 08:28:16 -0600 (MDT)
Message-Id: <3937C42D.2A1FC570@e2egolf.com>
Date: Fri, 02 Jun 2000 08:26:53 -0600
From: Will Bain <willbain@e2egolf.com>
X-Mailer: Mozilla 4.7 [en] (Win98; U)
X-Accept-Language: en
Mime-Version: 1.0
To: Handyboard Mailing List <handyboard@media.mit.edu>
Subject: Re: Ic question
References: <39372EE9.C40AF2E8@xmission.com>
Content-Type: text/plain; charset=iso-8859-1
Content-Transfer-Encoding: quoted-printable
X-Mime-Autoconverted: from 8bit to quoted-printable by aleve.media.mit.edu id KAA16476

As far as I know, the infinite loop construct is the way to do it.  Howev=
er, you can have multiple processes, each waiting on a sensor, each runni=
ng in an infinite loop, each using the defer() function to allow switchin=
g between processes when appropriate.  Some processes can use the msleep(=
) function to effectively lower their priority.  This seems to be a fairl=
y efficient way to go.

-- Will

Todd Ahlstrom wrote:
>=20
> I have been playing around with my handy in command line for a little
> while now.  It seems like the only way I can get it to start doing
> something when a sensor is activated is to have it in an infinite loop
> waiting for that sensor to be pressed.  For example:  I want it to prin=
t
> something to the LCD when a button is pressed.  I use a line like this:
> while(!digital(7)); printf...   while this gets the desired result, the
> heartbeat gets very slow while it is executing the infinite loop.  It
> seems like this means that all the processing power is being bogged dow=
n
> processing the infinite loop.  What I am hoping to accomplish is to hav=
e
> the Handy control a game.  What I want to happen is to have the start
> button pressed, then have the handy read some sensors and react based o=
n
> what it finds.    Is the infinite loop the only way to respond to senso=
r
> input?  I was hoping to be able to use an if control statement without
> an infinite loop.  i.e.:  if(digital(7)) {do something}; but obviously
> this doesn't work.  If anyone could let me know how they code for senso=
r
> inputs I would greatly appreciate it.
>=20
> Todd


--=20
+---------------------------------------------------------+
|                       ^^     <^ ^>                      |
|                     /  =F2=F3    =F3=B0=B0 \                      |
|                     /  =3DY=3D    U   \                     |
|       Wendy, Will, Tatoosh & Tenzing                    |
+---------------------------------------------------------+

If you steal from one author, it's plagiarism; if you steal
from many, it's research.                  -- Wilson Mizner

