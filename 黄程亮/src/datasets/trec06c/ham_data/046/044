Received: from kraken.itc.gu.edu.au (kraken.itc.gu.edu.au [132.234.250.31])
	by aleve.media.mit.edu (8.9.1a/8.9.1/+ALEVE) with ESMTP id TAA21934
	for <handyboard@media.mit.edu>; Tue, 8 Jun 1999 19:22:02 -0400 (EDT)
Received: from gcstaff.ins.gu.edu.au (gcstaff.ins.gu.edu.au [132.234.11.140]) by kraken.itc.gu.edu.au (8.8.5/8.7.3) with ESMTP id JAA27207; Wed, 9 Jun 1999 09:21:51 +1000 (EST)
Message-Id: <199906082321.JAA27207@kraken.itc.gu.edu.au>
Received: from GCSTAFF/SpoolDir by gcstaff.ins.gu.edu.au (Mercury 1.44);
    9 Jun 99 09:24:24 +1000
Received: from SpoolDir by GCSTAFF (Mercury 1.44); 9 Jun 99 09:23:48 +1000
From: "Charles Hacker EAS" <C.Hacker@ste.gu.edu.au>
Organization: Griffith University
To: marobi@direct.a2000.nl
Date: Wed, 9 Jun 1999 09:23:45 +1000
Mime-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7BIT
Subject: Re: How to make your own assembly code position independant
Reply-To: C.Hacker@mailbox.gu.edu.au
Cc: handyboard@media.mit.edu
X-Confirm-Reading-To: C.Hacker@mailbox.gu.edu.au
X-Pmrqc: 1
Priority: normal
In-Reply-To: <000001beb18f$c4fb5d40$0200a8c0@winplayer.marobi.nl>

Marobi,

Do not know much about IC and assembly code downloading.
However, I have produced a system for programming the HandyBoard with 
Assembly/machine code.  This system may help you.

It can be downloaded from:

http://132.234.46.5/Programs/HBoard/Index.shtml
 

> Hi,
> 
> I am currently trying to get some existing assembly code (not written by me) loaded into the HB.
> It loads fine, but everything gets messed up after running it.
> The exact addresss of this code is not known at the time of assembly and IC just loads it in memory
> after the stuff that it already loaded.
> This means code needs to be position independant ( or does IC have a kind of loader ??)
> What are the 'mistakes' to make code dependant on its position in memory and how to solve ?
> 
> Can anybody shine some light on it ?
> I even do not exactly understand the example in the HB manual on installing an interrupt routine of your own.
> This code uses the construct of 'LDD #interrupt_code_start, STD TOC4INT,X'. I know it works but ....
> #interrupt_code_start is just an address generated during assembly, which is a 'fictive address'.
> The begin address of this interrupt-routine as stated during assembly is not the same as the load address when loaded.
> How does this stuff work ?
> 
> I am stuck. It works but I do not exactly understand how.
> 
> Please help ......
> 
> 
> Rien
> rien@direct.A2000.nl
> 

Charles Hacker
Lecturer in Electronics, Computing and Physics
School of Engineering
Griffith University - Gold Coast
PMB 50 Gold Coast Mail Centre
Southport Queensland 9726
Australia.
Email - C.Hacker@mailbox.gu.edu.au
Ph. (07) 5594 8670
Fax.(07) 5594 8065

