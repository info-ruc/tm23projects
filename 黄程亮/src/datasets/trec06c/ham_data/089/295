Received: from breaker.dakotacom.net (breaker.dakotacom.net [66.192.152.146])
	by psy1.psych.arizona.edu (8.12.9/8.12.4) with ESMTP id h7T5Ngil027377
	for <DMDX@psy1.psych.arizona.edu>; Thu, 28 Aug 2003 22:23:42 -0700
Received: from anybodyi.u.arizona.edu (ppp766.broadband01.tus.dakotacom.net [69.9.26.254])
	by breaker.dakotacom.net (8.12.2/x.y.z) with ESMTP id h7T5Nhq0000923;
	Thu, 28 Aug 2003 22:23:43 -0700 (MST)
Message-Id: <5.1.0.14.2.20030828213546.00b12960@psy1.psych.arizona.edu>
Date: Thu, 28 Aug 2003 22:23:37 -0700
To: DMDX@psy1.psych.arizona.edu
From: "j.c.f." <jforster@psy1.psych.arizona.edu>
Subject: [DMDX] analog input devices
Mime-Version: 1.0
Content-Type: text/plain; charset="us-ascii"; format=flowed
Reply-To: DMDX@psy1.psych.arizona.edu
Sender: DMDX-owner@psy1.psych.arizona.edu
Precedence: list


   I strongly suspect I will be adding support for input devices with axes 
to handle an eye tracking task here, prior to doing this I'd like to get 
any input concerned parties might have on this so I don't rule out or make 
awkward any standard sorts of paradigms.  That's not to say that I'm going 
to add support for any suggestions I might get, unless they're really 
trivial I'm not likely to, but I will bear them in mind as I design things 
so they're easy to add at a later date if they need adding.

   While the task at hand only requires one axis I'm going to add two axis 
support anyway because it's sure to be required for almost all other analog 
tasks.  Also while we don't need a cursor except for calibration I suspect 
I'll be adding general cursor support although this might need to be 
dropped for performance reasons.  While we will be using a Measurement 
Computing analog to digital card I'll probably add support for DirectInput 
joysticks to facilitate testing.  There will have to be a calibration item 
that displays a set of points displayed successively that the axes will 
have to move the cursor to, haven't really thought about that too much 
yet.  I guess it's possible that the eye tracker provides non-linear data, 
that could get real messy to calibrate...

   In a dramatic departure I'll be adding a new frame duration control, 
<%until some_condition>, where the frame will stay displayed until that 
condition becomes true, that condition will probably be an expression.  If 
I do choose to use the expression evaluator a new function will be added 
that will be false until the coordinates the input axes control reach some 
bounding box, possibly for a specified time in ticks.  This is major 
because it opens DMDX to a whole new dimension of control where decisions 
based on the subjects data affect a display as data is gathered, something 
that is flat out not possible currently.  The display sequence will still 
be sequential but I guess it's possible that rescheduling of frames might 
be possible like the animator switch does -- god forbid debugging such 
items though.

   Data recording for the eye tracking task will simply be to write the 
coordinates to a .zil data file at a specified rate.  I guess for .azk 
files I could have a positive response defined by the cursor moving into 
some bounding box, same for negative but this isn't required for the eye 
tracking task so I'll probably leave this out unless there's fantastically 
strong demand for it.

   Any and all suggestions welcome, if someone can think of a task that 
these underpinnings won't handle I'm sure to give it thought.
                                                /"\
  -jonathan (j.c.f.)                            \ /
                                                 X
     ASCII RIBBON CAMPAIGN - AGAINST HTML MAIL  / \

   Great minds discuss ideas; small ones, people.



