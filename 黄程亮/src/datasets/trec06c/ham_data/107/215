Received: from interval.louisiana.edu (daemon@localhost [127.0.0.1])
	by interval.louisiana.edu (8.13.1/8.13.4/ull-interval-math-majordomo-1.5) with ESMTP id j9JKhsvs019790
	for <reliable_computing-outgoing@interval.louisiana.edu>; Wed, 19 Oct 2005 15:43:54 -0500 (CDT)
Received: (from daemon@localhost)
	by interval.louisiana.edu (8.13.1/8.13.4/Submit) id j9JKhrQq019789
	for reliable_computing-outgoing; Wed, 19 Oct 2005 15:43:53 -0500 (CDT)
Received: from smtpout1.cns.ohiou.edu (smtpout1.cns.ohiou.edu [132.235.51.146])
	by interval.louisiana.edu (8.13.1/8.13.4/ull-interval-math-majordomo-1.5) with ESMTP id j9JKhh2P019785
	for <reliable_computing@interval.louisiana.edu>; Wed, 19 Oct 2005 15:43:49 -0500 (CDT)
Received: from oak.cats.ohiou.edu (132.235.8.44)
  by smtpout1.cns.ohiou.edu with ESMTP; 19 Oct 2005 16:42:45 -0400
Received: from [132.235.14.20] by pm4 for 1s (PureMessage); Wed Oct 19 16:42:03 2005
Received: from kr-9 ([132.235.14.20])
	(authenticated bits=0)
	by oak.cats.ohiou.edu (8.13.1/8.13.1) with ESMTP id j9JKfgR22335110
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=NOT);
	Wed, 19 Oct 2005 16:41:57 -0400 (EDT)
Date: Wed, 19 Oct 2005 16:41:39 -0400
From: Ralph <kelsey@ohio.edu>
To: =?ISO-8859-1?Q?=22J=FCrgen_Wolff_v=2E_Gudenberg=22?= <wolff@informatik.uni-wuerzburg.de>,
        =?ISO-8859-1?Q?Herv=E9_Br=F6nnimann?= <hbr@poly.edu>,
        Sylvain Pion <Sylvain.Pion@sophia.inria.fr>,
        Guillaume Melquiond <gmelquio@ens-lyon.fr>
cc: reliable_computing@interval.louisiana.edu, interval@listserv.utep.edu,
        Walter Kraemer <kraemer@math.uni-wuppertal.de>
Subject: Re: C++ Standardization of intervals
Message-ID: <70CBA83D6555073108A991A6@kr-9>
In-Reply-To: <43560606.3000907@informatik.uni-wuerzburg.de>
References: <D63D0138-DA69-48F0-9F80-59358085AF99@poly.edu>
 <43560606.3000907@informatik.uni-wuerzburg.de>
X-Mailer: Mulberry/3.1.5 (Win32)
MIME-Version: 1.0
Content-Type: text/plain; charset=iso-8859-1; format=flowed
Content-Disposition: inline
X-PMX-Version: 4.7.0.111621, Antispam-Engine: 2.0.2.0, Antispam-Data: 2005.10.19.24 (pm4)
X-PMX-Information: http://www.cns.ohiou.edu/email/filtering/
X-PMX-Spam: Gauge=IIIIIII, Probability=7%, Report='__C230066_P5 0, __CD 0, __CT 0, __CTE 0, __CT_TEXT_PLAIN 0, __FRAUD_419_TRUST 0, __HAS_MSGID 0, __HAS_X_MAILER 0, __MIME_TEXT_ONLY 0, __MIME_VERSION 0, __SANE_MSGID 0'
Content-Transfer-Encoding: 8bit
X-MIME-Autoconverted: from quoted-printable to 8bit by interval.louisiana.edu id j9JKho2P019786
Sender: owner-reliable_computing@interval.louisiana.edu
Precedence: bulk

I know a lot more about the Boost Library than interval analysis. The boost 
library is a collaborative project of many of the worlds best programmers. 
Parts of the Boost library are often incorporated into the next version of 
C++. The code is always excellent, and reviewed and debated by many experts.

I do not know if Boost has any or many experts in interval analysis. If 
there are shortcomings in the Boost implementation of intervals, please 
send the Boost authors detailed explanations of suggested improvements. Let 
them know you are an expert. They will absolutely take your suggestions 
seriously. I think Boost intervals might be incorporated into C++ Ox, which 
is under review RIGHT NOW, so don't wait. Cooperating with Boost is likely 
to be much more productive for all than producing a competing standard.

Thanks,
Ralph Kelsey
Ohio Univ Comp Sci Dept

--On Wednesday, October 19, 2005 10:38 AM +0200 "\"Jürgen Wolff v. 
Gudenberg\"" <wolff@informatik.uni-wuerzburg.de> wrote:

> Dear Colleges
>   I think it will be a push forward for interval analysis, if we had a
> standard interval arithmetic library in C++.
>   Therefore I strongly support your proposal.
> But we should see that the proposal does not outrule existing
> applications or advanced libraries.like boost filib++ or C-XSC, e.g.
> The phrasing of the standard should be clear and easy to understand for
> compiler writers and other occasional users.
>
>   We have discussed the proposal on a workshop in Dagstuhl. I attach the
> result as a pdf file.
> best regards
> Juergen WvG
>
> Hervé Brönnimann wrote:
>
>> Dear fellow intervalers:
>>
>> As you may know, we (G. Melquiond, S. Pion, and myself) have been
>> following Jens Maurer's footsteps in providing a C++ implementation
>> of intervals. This has resulted in the C++ Boost.Interval library,
>> which was accepted three years ago after a thorough public review
>> into Boost. The URL is:
>>
>>   http://boost.org/libs/numeric/interval/doc/interval.htm
>>
>> One of the goals of the Boost.Interval library was standardization.
>> We hope that by standardization, we will create opportunities for
>> better optimizations directly in the C++ compilers.  The overall
>> benefit, should the proposal be accepted, is that an efficient and
>> optimized implementation of intervals would ship with most C++
>> compilers, in the same way as the class templates complex and
>> valarray already do, and as interval already does with the Sun compiler..
>>
>> We are now preparing a proposal for the C++ ISO Standard. We have of
>> course had to make a few choices, but by and large, our approach has
>> been to make reasonable and conservative choices to limit the
>> Boost.Interval library (which allows all kinds of behaviors through a
>> policy-based design).  I copy-paste the design overview below. This
>> is of course a very succinct statement, but it reflects most of the
>> design choices. The devil may be in the details, but in the broad
>> design, we have carefully taken into account the Interval FAQ, the
>> existing Sun implementation, and the discussions.  The full
>> preliminary proposal and code is accessible from Sylvain Pion's web
>> page:
>>
>>     http://www-sop.inria.fr/geometrica/team/Sylvain.Pion/cxx/
>>
>> We have already had some comments. If there are enough comments, we
>> would try to issue a revision before the next C++ standardization
>> meeting (October, in accordance with the Fall calendar of the C++
>> committee), where we will defend the proposal.
>>
>> We would like to get your feedback, and want to assure you that we
>> are committed in getting the best proposal possible, both in terms of
>> performance, design, and consensus.  Also, it is important that you
>> provide your vocal support (tell us, write a formal letter of
>> support, etc.) if you would like to see the proposal accepted.  We
>> would like to offer the C++ committee the assurance that the proposal
>> has the wide support from the interval community.
>>
>> Please reply to all three of us (we're in the Cc list) as well as to
>> the interval list.
>>
>> Yours,
>> --
>> Hervé Brönnimann
>> CIS, Polytechnic University
>> hbr@poly.edu
>>
>>
>>
>> Excerpt from the design overview [for information only; for
>> discussions, please try and read the whole proposal before commenting]
>>
>>
>>> The basic design aims at introducing a single class template
>>> {interval<T>} which guarantees the inclusion property.  Like
>>> {complex<T>}, we decided to support the three built-in floating
>>> point types and leave the rest unspecified. We decided to support
>>> empty intervals, because they can be integrated easily into the
>>> proposal. We decided to support equality and relational comparisons
>>> that extend the comparisons on the base type {T}. This implies
>>> dealing with comparisons of empty or overlapping intervals. Both  can
>>> be made to work very naturally by also providing an  {interval<bool>}
>>> as the result of such comparisons, and exceptions  can be avoided up
>>> to this level. In this way, we are supporting  both the
>>> certainly-less-than and possibly-less-than comparison  models. In
>>> order to use comparisons in conditionals, a conversion  from
>>> {interval<bool>} to {bool} is provided, and only at that level  is an
>>> exception thrown, when it involves an empty or indeterminate  boolean
>>> interval.  The behavior on out-of-domain argument values  (in {sqrt},
>>> for instance) is a silent and no-exception behaviour,  which returns
>>> the empty interval.
>>>
>>>
>
> --
>  Prof. Dr. Juergen Wolff v. Gudenberg <wolff@informatik.uni-wuerzburg.de>
>      o    Lehrstuhl fuer Informatik II
>     / \   Universitaet Wuerzburg             Phone: +49 (0)931-888-6602
> InfoII o  Am Hubland                         Fax:   +49 (0)931-888-6603
>   / \     D-97074 Wuerzburg
>  o   o    http://www2.informatik.uni-wuerzburg.de/staff/wvg/
>





