Received: from exchfe2.cs.cornell.edu (exchfenlb-2.cs.cornell.edu [128.84.97.34])
	by sundial.cs.cornell.edu (8.11.7-20031020/8.11.7/M-3.22) with ESMTP id k0VGr5422448
	for <egs@unix.cucs>; Tue, 31 Jan 2006 11:53:05 -0500 (EST)
Received: from EXCHVS2.cs.cornell.edu ([128.84.97.24]) by exchfe2.cs.cornell.edu with Microsoft SMTPSVC(6.0.3790.1830);
	 Tue, 31 Jan 2006 11:53:05 -0500
X-MimeOLE: Produced By Microsoft Exchange V6.5
Content-class: urn:content-classes:message
MIME-Version: 1.0
X-Security: message sanitized on sundial.cs.cornell.edu
	See http://www.impsec.org/email-tools/sanitizer-intro.html
	for details. $Revision: 1.148 $Date: 2004-12-19 11:59:17-08 
X-Security: The postmaster has not enabled quarantine of poisoned messages.
Content-Type: multipart/alternative;
	boundary="----_=_NextPart_001_01C62686.CD6CFA18"
Subject: PAPER 2
Date: Tue, 31 Jan 2006 11:50:34 -0500
Message-ID: <2AA53C9C489B0049B43E56D28088677B2B58D1@EXCHVS2.cs.cornell.edu>
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
Thread-Topic: PAPER 2
Thread-Index: AcYkk5F3tMseroJHQeSUarrqPTiDIQB8uKgB
References: <1138511915.3962.64.camel@localhost.localdomain>
From: "Kelvin So" <kelvinso>
To: <egs+summary>
X-OriginalArrivalTime: 31 Jan 2006 16:53:05.0126 (UTC) FILETIME=[CE0FE860:01C62686]
X-Spam-Checker-Version: SpamAssassin 3.0.2 (2004-11-16) on 
	sundial.cs.cornell.edu
X-Spam-Status: No, score=-4.9 required=5.0 tests=ALL_TRUSTED,AWL,BAYES_00,
	HTML_10_20,HTML_MESSAGE autolearn=ham version=3.0.2
X-Spam-Level: 

This is a multi-part message in MIME format.

------_=_NextPart_001_01C62686.CD6CFA18
Content-Type: text/plain; charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable

	=93Chord: A Scalable Peer-t-peer Lookup service for Internet
Applications=94 by Stoica and =93Tapestry: An Infrastructure for =
Fault-tolerant
Wide-area Location and Routing=94 by Ben both present a distributed hash =
table
structure which is a scalable and efficient algorithm for locating =
objects in
large and dynamic networks.=20
	Chord uses a one-dimensional, circular identifier space, which is
similar to Pastry. (Similar to Pastry: An object with key k is assigned =
to
the first node whose identifier is equal to or follows k in the =
identifier
space. Each node maintains a successor and a predecessor in the id =
space. A
simple lookup can simply use successor to go around the id space to find =
the
object, but that would take O(n). ) To increase performance, Chord =
maintains
a finger table (similar to binary search) which contains log(n) pointers
while pastry uses prefix routing to increase performance in lookup. The =
ith
entry in the node n finger table is the successor of n + 2i-1. =
Therefore,
when a node routes to an object, each hop toward the object greedily =
move at
least half of the remaining distance. Therefore, it results in log(n) =
hops.
When a peer joins the network, it routes to its successor of itself and
contacts its successor of its arrival. Because Chord periodically fixes
fingers, and successor, it notices a failed node and updates the
corresponding entry. To improve robustness, it uses a list of successors
instead of one successor, and then replicates the data to the list of
successors. The design of Chord is simple
	Tapestry uses similar prefix routing as Pastry, but it matches the
digit from right to left. The routing is very similar to Pastry, except
tapestry doesn=92t maintain Leafset information. The first differences =
between
Pastry is that Tapestry uses soft-state to republish object to keep =
location
pointer up-to-date. Tapestry has more redundancy and optimization than
Pastry. It allows having multiple roots, which keeps pointer to the =
object in
the network, and redundant links for neighbors to provide fault =
tolerance. It
also has other optimizations, such as caching root location if it is =
visited
often. However, Tapestry is more complex than Pastry.=20

------_=_NextPart_001_01C62686.CD6CFA18
Content-Type: text/html; charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>
<HEAD>
<DEFANGED_META HTTP-EQUIV=3D"Content-Type" CONTENT=3D"text/html; =
charset=3Diso-8859-1">
<DEFANGED_META NAME=3D"Generator" CONTENT=3D"MS Exchange Server version =
6.5.7638.1">
<TITLE>PAPER 2</TITLE>
</HEAD>
<BODY>
<!-- Converted from text/plain format -->

<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <FONT =
SIZE=3D2>&#147;Chord: A Scalable Peer-t-peer Lookup service for Internet =
Applications&#148; by Stoica and &#147;Tapestry: An Infrastructure for =
Fault-tolerant Wide-area Location and Routing&#148; by Ben both present =
a distributed hash table structure which is a scalable and efficient =
algorithm for locating objects in large and dynamic networks.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Chord uses a one-dimensional, =
circular identifier space, which is similar to Pastry. (Similar to =
Pastry: An object with key k is assigned to the first node whose =
identifier is equal to or follows k in the identifier space. Each node =
maintains a successor and a predecessor in the id space. A simple lookup =
can simply use successor to go around the id space to find the object, =
but that would take O(n). ) To increase performance, Chord maintains a =
finger table (similar to binary search) which contains log(n) pointers =
while pastry uses prefix routing to increase performance in lookup. The =
ith entry in the node n finger table is the successor of n + 2i-1. =
Therefore, when a node routes to an object, each hop toward the object =
greedily move at least half of the remaining distance. Therefore, it =
results in log(n) hops. When a peer joins the network, it routes to its =
successor of itself and contacts its successor of its arrival. Because =
Chord periodically fixes fingers, and successor, it notices a failed =
node and updates the corresponding entry. To improve robustness, it uses =
a list of successors instead of one successor, and then replicates the =
data to the list of successors. The design of Chord is simple<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Tapestry uses similar prefix =
routing as Pastry, but it matches the digit from right to left. The =
routing is very similar to Pastry, except tapestry doesn&#146;t maintain =
Leafset information. The first differences between Pastry is that =
Tapestry uses soft-state to republish object to keep location pointer =
up-to-date. Tapestry has more redundancy and optimization than Pastry. =
It allows having multiple roots, which keeps pointer to the object in =
the network, and redundant links for neighbors to provide fault =
tolerance. It also has other optimizations, such as caching root =
location if it is visited often. However, Tapestry is more complex than =
Pastry.<BR>
</FONT>
</P>

</BODY>
</HTML>
------_=_NextPart_001_01C62686.CD6CFA18--

