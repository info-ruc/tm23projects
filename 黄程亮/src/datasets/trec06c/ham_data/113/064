Received: from postoffice10.mail.cornell.edu (postoffice10.mail.cornell.edu [132.236.56.14])
	by sundial.cs.cornell.edu (8.11.7-20031020/8.11.7/M-3.22) with ESMTP id k0VGWY415833
	for <egs+summary>; Tue, 31 Jan 2006 11:32:34 -0500 (EST)
Received: from webmail.cornell.edu (hermes21.mail.cornell.edu [132.236.56.20])
	by postoffice10.mail.cornell.edu (8.12.10/8.12.6) with ESMTP id k0VGWWvg022573
	for <egs+summary>; Tue, 31 Jan 2006 11:32:33 -0500 (EST)
Received: from 128.84.98.64
        by webmail.cornell.edu with HTTP;
        Tue, 31 Jan 2006 11:32:33 -0500 (EST)
Message-ID: <4827.128.84.98.64.1138725153.squirrel@webmail.cornell.edu>
Date: Tue, 31 Jan 2006 11:32:33 -0500 (EST)
Subject: PAPER 2
From: "Ivan Stoyanov" <ids3>
To: egs+summary
User-Agent: SquirrelMail/1.4.5
MIME-Version: 1.0
Content-Type: text/plain;charset=iso-8859-1
Content-Transfer-Encoding: 8bit
X-Priority: 3 (Normal)
Importance: Normal
X-Spam-Checker-Version: SpamAssassin 3.0.2 (2004-11-16) on 
	sundial.cs.cornell.edu
X-Spam-Status: No, score=-2.6 required=5.0 tests=BAYES_00 autolearn=ham 
	version=3.0.2
X-Spam-Level: 

Pastry, Chord, Tapestry and Kademlia have similar design goals and similar
characteristics. Tapestry and Pastry are quite similar, using respectively
suffix and prefix -based routing, with their lookup time being
O(log2^b(N)), while Chord and Kademlia are O(log2(N)).

Tapestry is generally a more complicated improvement of Pastry. The main
improvements are the additional redundancy in the form of multiple
messages or links and the routing table optimization, which results in
better routing
performance than Pastry. Also, Tapestry used object replication which
makes it more faiulure resistant. Another important feature of Tapestry is
the root election algorithm. This makes routing more flexible, but
requires maintenance of global properties and more work for the join
protocol.

As far as simplicity is concerned, Tapestry is the most complex of all
with Kademlia and Chord being simpler. Kademlia's main contributions is
the usage of XOR metric. Chord, on the other side, uses consistent hashing
to store key-value mappings on the successor node in a circular space.
This makes node joining very simple, without too much information changing
place.

Chord does not take care of object replication and, like Pastry, says that
node failure will be handles by the availability of multiple rounds.
Kademlia and Tapestry do take of object replication.

Chord is the only system that provides a proof of correctness for its
routing.

All four systems are vulerable to network partitioning attacks, because an
attacker can join multiple times at self-chosen points.

All four systems do not address content verifiability, so any node can
claim to posses any data, but the actual vericication is left to the above
application.






