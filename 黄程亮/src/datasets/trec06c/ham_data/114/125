Received: from exchfe1.cs.cornell.edu (exchfenlb-1.cs.cornell.edu [128.84.97.33])
	by sundial.cs.cornell.edu (8.11.7-20031020/8.11.7/M-3.22) with ESMTP id k1DM4ct26399
	for <egs@unix.cucs>; Mon, 13 Feb 2006 17:04:38 -0500 (EST)
Received: from EXCHVS1.cs.cornell.edu ([128.84.97.23]) by exchfe1.cs.cornell.edu with Microsoft SMTPSVC(6.0.3790.1830);
	 Mon, 13 Feb 2006 17:04:38 -0500
Content-class: urn:content-classes:message
MIME-Version: 1.0
X-Security: message sanitized on sundial.cs.cornell.edu
	See http://www.impsec.org/email-tools/sanitizer-intro.html
	for details. $Revision: 1.148 $Date: 2004-12-19 11:59:17-08 
X-Security: The postmaster has not enabled quarantine of poisoned messages.
Content-Type: multipart/alternative;
	boundary="----_=_NextPart_001_01C630E9.7B4FCF27"
X-MimeOLE: Produced By Microsoft Exchange V6.5
Subject: PAPER 6
Date: Mon, 13 Feb 2006 17:04:38 -0500
Message-ID: <2EE48095D8C21643B0B70EC95F9BFBAF0EE63A@EXCHVS1.cs.cornell.edu>
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
Thread-Topic: PAPER 6
thread-index: AcYw6XtGRuovWLXOQs2tl2FyzaAbzg==
From: "Ian Kash" <kash@cs.cornell.edu>
To: <egs+summary@cs.cornell.edu>
X-OriginalArrivalTime: 13 Feb 2006 22:04:38.0072 (UTC) FILETIME=[7B4BDB80:01C630E9]

This is a multi-part message in MIME format.

------_=_NextPart_001_01C630E9.7B4FCF27
Content-Type: text/plain; charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable

Lv et. al. examine a pair of search methods that are superior to =
flooding in
unstructured P2P networks.  The first is expanding ring, which is =
essentially
flooding with an iteratively deepening TTL (which fixes the problem of
finding the right TTL).  The second is a number of random walks on the =
graph,
which gives two orders of magnitude improvement in search costs for =
realistic
graph models.  This has the nice side effect of supporting partial =
searches
because the walkers "call home" to see if they should continue so the =
user
can decide when the partial search has produced sufficient results.  =
They
then examine the effects of replication in their models.  Their results =
show
that uniform replication and replication proportional to the query =
frequency
give the same weighted average performance.  However, replicating
proportional to the square root of the query frequency gives optimal
performance.  The downside is that this proportion is difficult to =
implement.

The claims about the implementation square root replication are =
theoretically
shaky (though their results show that it is an improvement in practice). =
 In
particular, they say that it their path replication system is described =
by a
differential equation that has a fixed point corresponding to the sqrt =
n.
This immediately raises several issues.  Is this the only fixed point?  =
If
not, why should the system converge to it rather than some other?  Is it =
even
stable (i.e will the system converge to it from nearby or do you tend to
drift farther away once you get a little distance away)?  If the system =
does
converge to this fixed point, how long will it take?  In their =
evaluation,
they seemingly arbitrarily wait 5000s in Figure 7, but it is unclear how =
this
extends beyond the specific settings of their simulation.  This =
convergence
rate is of practical importance, because the rate will effect the =
ability of
the system to handle sudden changes in request frequency.

Beehive is a replication system built on top of a structured DHT that
provides O(1) lookups by exploiting the search patterns of the DHT.  =
Since
there is a deterministic set of possible paths to an object, Beehive can
shorten every path by one hop by replicating the object at every node =
one hop
back along one of these paths.  Using a closed-form optimal solution to =
a
system of equations, Beehive can provide average lookup of c hops for =
any
constant c while still having the worst case O(log n) hops provided by
Pastry.  Experimental results show significant performance improvements =
over
Pastry with passive caching of objects at every node along a query path
(PC-Pastry).  Once concern is that Figure 6 shows that after a large =
change
in object popularity, Beehive's latency rises to that of PC-Pastry and =
takes
longer to return to its basely.  If the popularity of objects is =
constantly
changing, this may lead to no improvement in latency over Pastry =
(although it
will still have significantly fewer object transfers).

------_=_NextPart_001_01C630E9.7B4FCF27
Content-Type: text/html; charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>
<HEAD>
<DEFANGED_META HTTP-EQUIV=3D"Content-Type" CONTENT=3D"text/html; =
charset=3Diso-8859-1">
<DEFANGED_META NAME=3D"Generator" CONTENT=3D"MS Exchange Server version =
6.5.7638.1">
<TITLE>PAPER 6</TITLE>
</HEAD>
<BODY>
<!-- Converted from text/plain format -->

<P><FONT SIZE=3D2>Lv et. al. examine a pair of search methods that are =
superior to flooding in unstructured P2P networks.&nbsp; The first is =
expanding ring, which is essentially flooding with an iteratively =
deepening TTL (which fixes the problem of finding the right TTL).&nbsp; =
The second is a number of random walks on the graph, which gives two =
orders of magnitude improvement in search costs for realistic graph =
models.&nbsp; This has the nice side effect of supporting partial =
searches because the walkers &quot;call home&quot; to see if they should =
continue so the user can decide when the partial search has produced =
sufficient results.&nbsp; They then examine the effects of replication =
in their models.&nbsp; Their results show that uniform replication and =
replication proportional to the query frequency give the same weighted =
average performance.&nbsp; However, replicating proportional to the =
square root of the query frequency gives optimal performance.&nbsp; The =
downside is that this proportion is difficult to implement.<BR>
<BR>
The claims about the implementation square root replication are =
theoretically shaky (though their results show that it is an improvement =
in practice).&nbsp; In particular, they say that it their path =
replication system is described by a differential equation that has a =
fixed point corresponding to the sqrt n.&nbsp; This immediately raises =
several issues.&nbsp; Is this the only fixed point?&nbsp; If not, why =
should the system converge to it rather than some other?&nbsp; Is it =
even stable (i.e will the system converge to it from nearby or do you =
tend to drift farther away once you get a little distance away)?&nbsp; =
If the system does converge to this fixed point, how long will it =
take?&nbsp; In their evaluation, they seemingly arbitrarily wait 5000s =
in Figure 7, but it is unclear how this extends beyond the specific =
settings of their simulation.&nbsp; This convergence rate is of =
practical importance, because the rate will effect the ability of the =
system to handle sudden changes in request frequency.<BR>
<BR>
Beehive is a replication system built on top of a structured DHT that =
provides O(1) lookups by exploiting the search patterns of the =
DHT.&nbsp; Since there is a deterministic set of possible paths to an =
object, Beehive can shorten every path by one hop by replicating the =
object at every node one hop back along one of these paths.&nbsp; Using =
a closed-form optimal solution to a system of equations, Beehive can =
provide average lookup of c hops for any constant c while still having =
the worst case O(log n) hops provided by Pastry.&nbsp; Experimental =
results show significant performance improvements over Pastry with =
passive caching of objects at every node along a query path =
(PC-Pastry).&nbsp; Once concern is that Figure 6 shows that after a =
large change in object popularity, Beehive's latency rises to that of =
PC-Pastry and takes longer to return to its basely.&nbsp; If the =
popularity of objects is constantly changing, this may lead to no =
improvement in latency over Pastry (although it will still have =
significantly fewer object transfers).</FONT></P>

</BODY>
</HTML>
------_=_NextPart_001_01C630E9.7B4FCF27--

