Received: from postoffice10.mail.cornell.edu (postoffice10.mail.cornell.edu [132.236.56.14])
	by sundial.cs.cornell.edu (8.11.7-20031020/8.11.7/M-3.22) with ESMTP id k1GHpet07098
	for <egs+summary@cs.cornell.edu>; Thu, 16 Feb 2006 12:51:40 -0500 (EST)
Received: from orpheus3.dataserver.cornell.edu (orpheus3.dataserver.cornell.edu [128.253.161.167])
	by postoffice10.mail.cornell.edu (8.12.10/8.12.6) with ESMTP id k1GHpcjD011157;
	Thu, 16 Feb 2006 12:51:38 -0500 (EST)
Message-ID: <368894474.1140112297095.JavaMail.webber@orpheus3.dataserver.cornell.edu>
Date: Thu, 16 Feb 2006 12:51:38 -0500 (EST)
From: Gopal Parameswaran <gp72@cornell.edu>
To: egs+summary@cs.cornell.edu
Subject: PAPER 7
Cc: gp72@cornell.edu
Mime-Version: 1.0
Content-Type: text/plain; charset=UTF-8
X-Mailer: uPortal WEB email client 3.0
Content-Transfer-Encoding: 8bit
X-MIME-Autoconverted: from quoted-printable to 8bit by sundial.cs.cornell.edu id k1GHpet07098

Mercury is a scalable routing protocol for range queries by creating a set of routing hubs where a routing hub is a logical collection of nodes in the system and queries are passed to one of the hubs corresponding to the attributes that are being passed and a new data item is sent to all hubs for which it has an associated attribute. The routing protocol is  implemented by first partitioning the nodes in the system into a circular contiguous overlay separated into groups called attribute hubs which are in fact logical partitions with each attribute hub corresponding to each  each attribute. The logical partitions are called dimensions. When a node gets a query it resolves all queries in its range or else passes it on.  Each node in the routing hub has a link to its predecessor and to its successor and also maintains a link to all other dimensions or hubs to support the selection of a range query for a set of attributes. Routing is done in a hub with the query entering the system  at the point where the maximum value of the attribute is stored and then traversed link by link till it reaches a value of the attribute at a node that is lesser than the least value in the range query for the attribute. Also the node traversals are reduced by maintaining in its routing table a distance matrix that specify the nodes at a particular range distance from the node. All values that correspond to the data elements that match the query are selected. This design imposes two restrictions. Firstly since the each attribute has its own hub as the number of dimensions increase the links to be maintained increases. Secondly for range queries the advantages of distributed hash tables viz load balancing cannot be utilized since the node id  should have a correlation with the range of the values. Mercury ensures load balancing by implementing load balancing by explicit load balancing by moving around nodes and changing the ranges of the nodes according to the load. 
Every hub in the system has a representative node and nodes join the system by querying it and then getting hub information from a set of representative nodes that represent each hub in the system. The new node chooses a hub at random and contacts members of that hub and inserts itself by taking half of the nodes range of values and used the nodes predecessor pointer as its own and the node as the successor pointer and  changes the nodes predecessor pointer to itself thus adding itself the the network. It also copies the routing table from the old node. Another observation from this is that every new addition is a form of localized load balancing. If three or more successive nodes leave the system then the links in the nodes break down and till the sections are repaired certain sections of the queries would get affected that correspond to the broken links.

P-Tree
The paper deals with a peer to peer network like Mercury that evaluates range queries in addition to equality queries using P-Trees. A P-trees is a spatial access method that defines hyperplanes, in addition to the orthogonal dimensions, which node boundaries may parallel. It can also be imagined to be a collection of b+ trees at every node with each b+ tree corresponding to a range of values. The sub trees have overlapping values indexed by multiple sub trees that helps in reducing excessive co-ordination between the nodes. The P-tree network implements routing different from Mercury in the sense that it also tries to start from a maximum value for the search by first looking for the farthest away pointer that does not overshoot the lower bound of the search and then proceeds from there node by node for each successor till it reaches the lower bound and searches for values till it just crosses the upper bound specified in the rang query. The behaviour of P-Trees is similar to B+ Trees and when consistent would involve logN to the base b. Node insertions are performed by contacting existing nodes and determining the position of the new node and taking the predecessor's pointer and changing the predecessor's pointer to its own. Node deletions are automatically taken care of by two processes called Ping process and stablization process. In the Ping process checks at periodic intervals for node failures or deletions and they are detected and then used by the stablization process where the network is repaired. 

Geo Peer
This paper mainly deals with the scalability of networks of stationary nodes and how support can be provided to very large scale location aware systems. GeoPeer is a location aware Peer to Peer network that supports location constrained queries and information dissemination also taking into account the unbalanced distribution of nodes in the geographic area. It is based on a concept defined as geographic ping that works by storing the path to a request that is made periodical and then using the path for subsequent requests thus bypassing the next queries for the same object. This would be equivalent to caching the address of the objects instead of querying for it. Geo Peer uses a Delaunay triangulation for the topology and routing is done by a neighbour discovery process and choosing an angle in the direction of the destination node with the angle that it makes with the destination node being reduced with each jump from node to node. Thus it can be also imagined as a control system that oscillates around its mean as it flows along time. Thus this algorithm can be changed by making jumps that decrease the angles in proportion to the slope. Also this algorithm uses a concept of Long range contacts that are addresses in its routing table that point to nodes that are at a distance. It implements this using three mechanisms, the first of which the Hop level mechanism looks at the number of hops it has made so far in its search and if the number of hops exceed a certain value it stores the current node in its routing table and again starts the search from that node. Thus for all further queries that are in the same region in space the queries can start from that node. Geo peer implements this routing mechanism by not taking random hashes for node idâ€™s but making hashes that have a correlation with the node location. This algorithm can be further improved by taking hashes that include a distance metric in its hash function and would help in making the finger pointer tables more meaningful. This paper also discusses ab
ining statistics about the hits via hit counters whose values are used to adjust the node distribution.

