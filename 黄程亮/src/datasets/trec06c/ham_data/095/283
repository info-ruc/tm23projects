Received: from interval.louisiana.edu (localhost [127.0.0.1])
	by interval.louisiana.edu (8.13.1/8.13.1/ull-interval-math-majordomo-1.5) with ESMTP id i8BNGND7015660
	for <reliable_computing-outgoing@interval.louisiana.edu>; Sat, 11 Sep 2004 18:16:23 -0500 (CDT)
Received: (from daemon@localhost)
	by interval.louisiana.edu (8.13.1/8.13.1/Submit) id i8BNGM9k015659
	for reliable_computing-outgoing; Sat, 11 Sep 2004 18:16:22 -0500 (CDT)
Received: from imap.univie.ac.at (mail.univie.ac.at [131.130.1.27])
	by interval.louisiana.edu (8.13.1/8.13.1/ull-interval-math-majordomo-1.5) with ESMTP id i8BNGDiK015655
	for <reliable_computing@interval.louisiana.edu>; Sat, 11 Sep 2004 18:16:19 -0500 (CDT)
Received: from localhost.localdomain (data.univie.ac.at [131.130.1.86])
	by imap.univie.ac.at (8.12.10/8.12.10) with ESMTP id i8BNFlIS109370;
	Sun, 12 Sep 2004 01:15:55 +0200
Date: Sun, 12 Sep 2004 01:15:47 +0200
From: arnold.neumaier@univie.ac.at
Message-Id: <200409112315.i8BNFlIS109370@imap.univie.ac.at>
Content-Disposition: inline
Content-Transfer-Encoding: binary
MIME-Version: 1.0
To: reliable_computing@interval.louisiana.edu
Subject: Re: intervals for integer programs
Reply-To: arnold.neumaier@univie.ac.at
References: <2.2.32.20040911145325.0098f558@pop.louisiana.edu>
Content-Type: text/plain; charset="iso-8859-1"
X-Mailer: Mailbox Webmail
X-DCC-ZID-Univie-Metrics: mx8 4249; Body=2 Fuz1=2 Fuz2=2
Sender: owner-reliable_computing@interval.louisiana.edu
Precedence: bulk

"R. Baker Kearfott" <rbk@louisiana.edu> wrote:

> Nonetheless, the technique DOES allow you to treat the integers
> as continuous variables without losing optima.  

Yes, this does not contradict what I said; see below.


> Second, some global optimization programs are touted as
> being able to efficiently ignore large numbers of local optima.

Yes. That why the sine approach works. 

I only claimed that it is inefficient, compared to treating
the integers as integer variables, and proceeding as in my first
mail in this thread. In addition, one needs of course suitable
techniques for integer rounding, as in mixed integer linear
programming.


> Third, it is presently unclear to me what you mean about
> "generates a local extremum at each critical point."  

I did not say that, but 
''it generates a local extremum at every feasible integer point''

The precise statement underlying this remark is that if you
fix all integer variables at some feasible integer values
and locally minimize the objective in the remaining variables,
the resulting point will be a local mimimizer of the sine-constrained
program. 

In particular, if all variables are integers then _any_ feasible 
point satisfies the first order conditions for the sine version. 
In that case, all work done in an interval Newton method is wasted.


> What is your objective?  Are you using a penalty method?

No. Constrained optimization problems also may have several 
local minima. One can pass the sine version to any global solver
for constrained problems, and my remarks apply no matter what
methods the solver uses. In each case, modifying the solver
directly will gain efficiency.

Essentially, my remark boils down to saying that the sine-trick
is just a waste of many transcendental function evaluations
(sines and cosines in function and gradient evaluatiosn, 
arc sines in constraint propagation).

It buys nothing but the ability to use black box continuous
global solvers, at the expense of introducing inefficiency
at various places (overhead in function and gradient evaluation,
optimality conditions, and constraint propagation).

Apart from that, it should not have a negative effect on the
number of boxes in the b&b process, at least if the global 
solver is well-written.


Arnold Neumaier


> >> When the variables xi must be integers, Hansen proposes
> >> (in "Global Optimization Using Interval Analysis", pg 214)
> >> to solve a constrained problem by adding constraints like
> >> sin (pi*xi)=0
> >
> >This is a simple way of posing the problem to a package that handles
> >only continuous problems. But it is quite inefficient since
> >it generates a local extremum at every feasible integer point,
> >and thus makes the problem unnecessarily difficult.
> >
> >Even linear mixed integer problems, which can generally be solved
> >quite efficiently using branch and cut with an LP-solver, 
> >will become nonlinear!

