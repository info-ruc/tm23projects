Received: from interval.louisiana.edu (localhost [127.0.0.1])
	by interval.louisiana.edu (8.13.1/8.13.1/ull-interval-math-majordomo-1.5) with ESMTP id i8CHxd1r017308
	for <reliable_computing-outgoing@interval.louisiana.edu>; Sun, 12 Sep 2004 12:59:39 -0500 (CDT)
Received: (from daemon@localhost)
	by interval.louisiana.edu (8.13.1/8.13.1/Submit) id i8CHxcMY017307
	for reliable_computing-outgoing; Sun, 12 Sep 2004 12:59:38 -0500 (CDT)
Received: from pop2.greatbasin.net (pop2.greatbasin.net [207.228.35.4])
	by interval.louisiana.edu (8.13.1/8.13.1/ull-interval-math-majordomo-1.5) with ESMTP id i8CHxTTA017303
	for <reliable_computing@interval.louisiana.edu>; Sun, 12 Sep 2004 12:59:36 -0500 (CDT)
Received: from D3HN8211 (rno-dsl0a-121.gbis.net [216.82.144.121])
	by pop2.greatbasin.net (8.12.10/8.12.10) with SMTP id i8CHxJoL017893;
	Sun, 12 Sep 2004 10:59:23 -0700
From: "Daniel H. Fylstra" <dfylstra@frontsys.com>
To: "Martin Berz" <berz@msu.edu>, <reliable_computing@interval.louisiana.edu>,
        "Rosa, Andrea" <A.Rosa@napier.ac.uk>
Subject: RE: intervals for integer programs
Date: Sun, 12 Sep 2004 11:03:50 -0700
Message-ID: <APEGJPFKPKHAINNNMGCHIEALFFAA.dfylstra@frontsys.com>
MIME-Version: 1.0
Content-Type: text/plain;
	charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
X-Priority: 3 (Normal)
X-MSMail-Priority: Normal
X-Mailer: Microsoft Outlook IMO, Build 9.0.2416 (9.0.2911.0)
Importance: Normal
In-Reply-To: <LOBBLFLDLCOABDBDAMICCEJNHBAA.berz@msu.edu>
X-MimeOLE: Produced By Microsoft MimeOLE V6.00.2800.1441
Sender: owner-reliable_computing@interval.louisiana.edu
Precedence: bulk

Dear Martin,

Sure, but let me also say that this general discussion of the use of interval
branch & bound methods to solve problems with integer variables is very
useful to me, and I suspect to others on the list.  It's no secret that there
are a lot more people solving LP/MIP problems, and probably MINLP problems
(as they're usually called) than people solving global optimization problems
with interval branch & bound methods.  Having read much of the literature on
both sides (OR/MS integer programming methods and interval methods), I'd say 
that there are still many contributions that each side could make to the other.

Dan Fylstra
Frontline Systems Inc.


> -----Original Message-----
> From: owner-reliable_computing@interval.louisiana.edu
> [mailto:owner-reliable_computing@interval.louisiana.edu]On Behalf Of
> Martin Berz
> Sent: Saturday, September 11, 2004 8:56 PM
> To: reliable_computing@interval.louisiana.edu; Rosa, Andrea
> Subject: RE: intervals for integer programs
> 
> 
> Dear all,
> 
> this discussion seems to be getting a little hypothetical. It appears it may
> be a good idea if Andrea would supply a representative test problem, and then
> Baker can apply Globsol to it, while Neumaier can apply whatever other tool he
> sees fit. Then we compare the results (which better agree), and more
> importantly, the performance - because in the end, for Andrea that's all that
> counts.
> 
> Martin
> 
> > -----Original Message-----
> > From: owner-reliable_computing@interval.louisiana.edu
> > [mailto:owner-reliable_computing@interval.louisiana.edu]On Behalf Of
> > arnold.neumaier@univie.ac.at
> > Sent: Saturday, September 11, 2004 7:16 PM
> > To: reliable_computing@interval.louisiana.edu
> > Subject: Re: intervals for integer programs
> >
> >
> > "R. Baker Kearfott" <rbk@louisiana.edu> wrote:
> >
> > > Nonetheless, the technique DOES allow you to treat the integers
> > > as continuous variables without losing optima.
> >
> > Yes, this does not contradict what I said; see below.
> >
> >
> > > Second, some global optimization programs are touted as
> > > being able to efficiently ignore large numbers of local optima.
> >
> > Yes. That why the sine approach works.
> >
> > I only claimed that it is inefficient, compared to treating
> > the integers as integer variables, and proceeding as in my first
> > mail in this thread. In addition, one needs of course suitable
> > techniques for integer rounding, as in mixed integer linear
> > programming.
> >
> >
> > > Third, it is presently unclear to me what you mean about
> > > "generates a local extremum at each critical point."
> >
> > I did not say that, but
> > ''it generates a local extremum at every feasible integer point''
> >
> > The precise statement underlying this remark is that if you
> > fix all integer variables at some feasible integer values
> > and locally minimize the objective in the remaining variables,
> > the resulting point will be a local mimimizer of the sine-constrained
> > program.
> >
> > In particular, if all variables are integers then _any_ feasible
> > point satisfies the first order conditions for the sine version.
> > In that case, all work done in an interval Newton method is wasted.
> >
> >
> > > What is your objective?  Are you using a penalty method?
> >
> > No. Constrained optimization problems also may have several
> > local minima. One can pass the sine version to any global solver
> > for constrained problems, and my remarks apply no matter what
> > methods the solver uses. In each case, modifying the solver
> > directly will gain efficiency.
> >
> > Essentially, my remark boils down to saying that the sine-trick
> > is just a waste of many transcendental function evaluations
> > (sines and cosines in function and gradient evaluatiosn,
> > arc sines in constraint propagation).
> >
> > It buys nothing but the ability to use black box continuous
> > global solvers, at the expense of introducing inefficiency
> > at various places (overhead in function and gradient evaluation,
> > optimality conditions, and constraint propagation).
> >
> > Apart from that, it should not have a negative effect on the
> > number of boxes in the b&b process, at least if the global
> > solver is well-written.
> >
> >
> > Arnold Neumaier
> >
> >
> > > >> When the variables xi must be integers, Hansen proposes
> > > >> (in "Global Optimization Using Interval Analysis", pg 214)
> > > >> to solve a constrained problem by adding constraints like
> > > >> sin (pi*xi)=0
> > > >
> > > >This is a simple way of posing the problem to a package that handles
> > > >only continuous problems. But it is quite inefficient since
> > > >it generates a local extremum at every feasible integer point,
> > > >and thus makes the problem unnecessarily difficult.
> > > >
> > > >Even linear mixed integer problems, which can generally be solved
> > > >quite efficiently using branch and cut with an LP-solver,
> > > >will become nonlinear!
> >
> 
> 
> 
> 
> 
> 


