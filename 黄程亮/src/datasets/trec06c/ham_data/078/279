Received: from memphis.ece.cornell.edu (memphis.ece.cornell.edu [128.84.81.8])
	by sundial.cs.cornell.edu (8.11.3/8.11.3/M-3.7) with ESMTP id fAJMsQR07878
	for <egs@cs.cornell.edu>; Mon, 19 Nov 2001 17:54:26 -0500 (EST)
Received: from photon.ece.cornell.edu (photon.ece.cornell.edu [128.84.81.138])
	by memphis.ece.cornell.edu (8.11.6/8.11.2) with ESMTP id fAJMqQM09946
	for <egs@cs.cornell.edu>; Mon, 19 Nov 2001 17:52:26 -0500
Date: Mon, 19 Nov 2001 17:52:33 -0500 (EST)
From: Edward Hua <eyh5@ece.cornell.edu>
X-X-Sender:  <eyh5@photon.ece.cornell.edu>
To: <egs@CS.Cornell.EDU>
Subject: 615 Paper # 60
Message-ID: <Pine.LNX.4.33.0111191751460.21922-100000@photon.ece.cornell.edu>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII

Freenet: A Distributed Anonymous Information Storage and Retrieval System

Ian Clark, Oskar Sandberg, Brandon Wiley, and Theodore W. Hong

	
	This paper presents Freenet, an adaptive peer-to-peer network 
application that permits the publication, replication, and retrieval of 
datawithout compromising the anonymity of both the authors and readers of 
information. The Freenet project bears in mind five design objectives:

	1)Anonymity for both producers and clients of infomration
	2)Deniability for storers of information
	3)Resistance to attempts by third parties to deny access to 
information
	4)Efficient dynamic storage and routing of information
	5)Decentralization of all network functions.

The idea of Freenet was conceived in response to the threats of on-line 
theft, attack, and evesdropping of information. In a Freenet architecure, 
requests for keys are passed from node to node through a chain of proxy 
requests in which each node makes a local decision as to where to send the 
request next. The routing algorithms for storing and retrieving data are 
designed to adaptively adjust routes over time to provide efficient 
performance while using only local knowledge. 

	The operations of Freenet can be broken down to several functions, 
including keys and searching, data retrieval, data storage, data 
management, and node addition. Keys and searching allows the user to 
identify intended data by binary file keys obtained by applying the SHA-1 
hashing hunction; data retrieval is regulated by hops-to-live constraint 
and the loop-avoidance condition. It may also have the potential  benefits 
of allowing the node hoding the requested data to be more experienced in 
handling incoming requests if these requests are of similar key. Data 
storage refers to a node posting and advertising new information under the 
hops-to-live constraint. Data management does not keep permanent copies of 
data files, but instead flushs out the least recently used files in order 
to make room for the new addition of files. Also for a variety of reasons, 
the node operator does not have to explicitly know the content of their 
datastores. Node addition is achieved by a new node announcing its 
presence to its neighboring nodes. In so doing, a cryptographic protocol 
is employed to allow existing nodes to be consistent with each other in 
deciding which keys to send to the new node. 	

	The performance of Freenet is evaluated in four aspects: network 
convergence, scalability, fault tolerance, and security. Freenet is able 
to achieve quick network convergence within a shor period of time while 
maintaining a suitable number of imtermediate hops for a path after 
convergence. The network scales rather well for the median and third 
quartile in that as the network size grows, the request pathlength remains 
relatively constant over a large network expansion. The authors of the 
paper also show that a Freenet architecture is able to sustain an 
acceptable fault tolerance even when up to 30% of nodes have failed in the 
network. Finally in dealing with the issue of security, the authors claim 
that although the basic Freenet does not offer much of protection against 
malicious users of various forms, when coupled with pre-routing, Freenet 
is successful in protecting sender anonymity and key anonymity beyond 
suspicion. However, judging from the Table 1 presented in the paper, I do 
not share this claim, as its shows the basic Freent is only able to hide, 
beyond suspicion, the sender anonymity from a group of collaborating 
nodes, and all three other scenarios (sender and key anonymity with a 
local eavesdropper and key anonymity with collaborating nodes) show the 
identities of the sender and receiver of data easily fall prey to the 
attackers.   


