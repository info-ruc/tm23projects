Received: from capricorn.ds.csl.cornell.edu (capricorn.csl.cornell.edu [132.236.71.92])
	by sundial.cs.cornell.edu (8.11.3/8.11.3/M-3.7) with ESMTP id fA1GaOR14313
	for <egs@cs.cornell.edu>; Thu, 1 Nov 2001 11:36:24 -0500 (EST)
Subject: 615 Paper 30
Date: Thu, 1 Nov 2001 11:38:02 -0500
MIME-Version: 1.0
Content-Type: text/plain;
	charset="iso-8859-1"
Message-ID: <97C142C1212ED545B0023A177F5349C4053B32@capricorn.ds.csl.cornell.edu>
X-MS-Has-Attach: 
X-MimeOLE: Produced By Microsoft Exchange V6.0.4712.0
content-class: urn:content-classes:message
X-MS-TNEF-Correlator: 
Thread-Topic: 615 Paper 30
Thread-Index: AcFi85M6kK156WyzRSW4TvNN2Z/X3g==
From: "Avneesh Bhatnagar" <avneesh@csl.cornell.edu>
To: <egs@CS.Cornell.EDU>
Content-Transfer-Encoding: 8bit
X-MIME-Autoconverted: from quoted-printable to 8bit by sundial.cs.cornell.edu id fA1GaOR14313

Design and implementation of an intentional naming system

This paper describes the design of an intentional naming system (INS),
which can be used as an expressive, robust, responsive and easily
configurable resource discovery system in a mobile environment.

The main idea is that application should be able to describe what kind
of service,they are looking for and the location of these services. The
system is implemented through an overlay network which incoroprates soft
state messages i.e state that is refreshed upon receiving newer data, or
discarded after a certain lifetime of inactivity.

The intentional name is resolved using a name specifier, which consists
of an attribute value pair, a set of which establish a name tree. The
application might use intentional anycast or intentional multicast to
request information. There are two ways to foward information to a
specific device:
a. Early binding. Returns list of IP addresses corresponding to the
desired name.
b. LAte binding (uses the two mechanisms mentioned above). This handles
more dynamic situations and also facilitates load balancing, since the
INRs can spawn instances on inactive resolvers. The method used is
virtual spaces, the resolver needing only a subset of the total
namespace. Virtual spaces can overlap.

Routig within the overlay is done using a the DBF algorithm.I felt that
the simulation studies were a bit lacking in terms of the explanation
for some of the observed events. e.g in fig 15, routing time to differnt
virtual spaces is lesser than other routing times. Secondly what is the
effect of user density, i.e how does this system scale? However I also
think that this idea is very interesting and there are a number of
applications that could potentially benefit from the service-provider
binding that this system provides.

