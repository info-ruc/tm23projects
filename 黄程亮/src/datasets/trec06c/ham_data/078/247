Received: from moore.csl.cornell.edu (moore.csl.cornell.edu [132.236.71.83])
	by sundial.cs.cornell.edu (8.11.3/8.11.3/M-3.7) with ESMTP id fAD4XpR17441
	for <egs@cs.cornell.edu>; Mon, 12 Nov 2001 23:33:51 -0500 (EST)
Received: from localhost (viran@localhost)
	by moore.csl.cornell.edu (8.11.3/8.9.2) with ESMTP id fAD4XkT51057
	for <egs@cs.cornell.edu>; Mon, 12 Nov 2001 23:33:46 -0500 (EST)
	(envelope-from viran@moore.csl.cornell.edu)
X-Authentication-Warning: moore.csl.cornell.edu: viran owned process doing -bs
Date: Mon, 12 Nov 2001 23:33:46 -0500 (EST)
From: "Virantha N. Ekanayake" <viran@csl.cornell.edu>
To: <egs@CS.Cornell.EDU>
Subject: 615 Paper 42
Message-ID: <Pine.BSF.4.33.0111122332430.51047-100000@moore.csl.cornell.edu>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII

TinyOS is lightweigt multithreaded (microthreaded) operating system for
wireless sensor environments.  They provide a high degree of concurrency
to keep the data flowing and reduce the requirements for data buffers.
The multi-threading has a two-level scheduling scheme: one low-level for
scheduling hardware events, and another for long-running tasks that can be
interrupted.  The system is event-based and thus does not have the
overhead of context switches in a stack based threaded system.  The main
points of the OS can be described as follows:  Components are hierarchical
and range from low-level hardware modules to high-level application
modules.  Commands are used to communicate with lower-levels in a
non-blocking manner.  Events are generated by hardware components and
other lower levels and propagate upwards.  Tasks are the main method of
performing work and encapsulate command and event generation, and in this
system, they run to completion.  The task-scheduler is a simple FIFO based
system.

The OS is very well suited for a micro-controller environment -- it fits
in 172 bytes of memory and context switches in 12.75us (on a 4Mhz
processor).

Active Messages are the most significant introduction to TinyOS -- the
example they present shows how they can be used to set up multi-hop
routing in an efficient manner.  The active message concept is basically a
remote procedure call (each message invokes a local handler in the
receiver) without all the overhead of a system call.  In the TinyOS case,
they can be handled via the normal event handler.

All in all, TinyOS presented an interesting programming viewpoint towards
the design of lowcost sensor networks, something absent from other more
hardware centric designs that never really addressed the feasability of
using the hardware.

Smart Dust describes millimeter scale autonomous wireless sensor devices.
They base the sensor concept on MEMS and connect to a custom built
processor and communication device. They did build a 100 square millimeter
device that was non-functioning back in 1999 -- the current state of
affairs isn't evident on their web page.  However, they have been
leveraging the TinyOS on larger scale devices with RF, laser, IR
communication methods. It looks like a promising effort in sensor
networks, and they seem to have a unified SW/HW approach that's necessary
for a successful implementation.


