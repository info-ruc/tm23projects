Received: from memphis.ece.cornell.edu (memphis.ece.cornell.edu [128.84.81.8])
	by sundial.cs.cornell.edu (8.11.3/8.11.3/M-3.7) with ESMTP id fADIamR28474
	for <egs@cs.cornell.edu>; Tue, 13 Nov 2001 13:36:48 -0500 (EST)
Received: from aquinas.ee.cornell.edu (aquinas.ee.cornell.edu [128.84.236.57])
	by memphis.ece.cornell.edu (8.11.6/8.11.2) with ESMTP id fADIZMH32618
	for <egs@cs.cornell.edu>; Tue, 13 Nov 2001 13:35:22 -0500
Date: Tue, 13 Nov 2001 13:35:41 -0500 (EST)
From: Prince Samar <samar@ece.cornell.edu>
X-Sender: samar@aquinas.ee.cornell.edu
To: egs@CS.Cornell.EDU
Subject: 615 PAPER 42
Message-ID: <Pine.GSO.4.21.0111131335110.7253-100000@aquinas.ee.cornell.edu>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII


42) Sensors: Mote, TinyOS, Smart Dust

Sensor networks are expected to be widely deployed in the future, owing to
its low cost and small size. Some of the current sensors can sense
acceleration, magnetic field, temperature, pressure, humidity, light and
rf signal strength. The limiting features of sensor networks are the
limited amount of power, computation, storage and bandwidth that they
possess. This calls for really efficient designs that conserves the
battery power and cost while keeping the size of the sensor small. Further
the sensors are intended to be largely unattended and should be robust
with narrow interfaces. TinyOS looks at this problem from the software
point of view, whereas Smart Dust tries to optimize the hardware of the
sensor.

TinyOS is a lightweight multithreaded operating system for wireless sensor
environments.  They provide a high degree of concurrency to keep the data
flowing and reduce the requirements for data buffers. TinyOS component
model propagates hardware abstractions into software and allows for
migrations of software component into hardware. The event based nature of
TinyOS enables efficient use of the energy resources. One of the nodes is
designated as the base station and all the rest of the nodes propagate
data to this node. The use of Active messages, which is essentially a
remote procedure call without the overhead of the system call, is an very
interesting idea used by TinyOS to reduce energy consumption.

Smart Dust are designed to be small sensors which can be spread in an area
randomly and can monitor the area for long periods of time. Thus a key
feature of the Smart Dust is the conservation of energy. The nodes are
designed to have a very low duty cycle, waking up periodically to gather
information and communicate with other nodes before going back to sleep
again. They use an optical communication scheme, using reflectors to
communicate with other nodes.

