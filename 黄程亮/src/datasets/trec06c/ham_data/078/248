Received: from bureau6.utcc.utoronto.ca (bureau6.utcc.utoronto.ca [128.100.132.16])
	by sundial.cs.cornell.edu (8.11.3/8.11.3/M-3.7) with ESMTP id fAD7gIR07843
	for <egs@cs.cornell.edu>; Tue, 13 Nov 2001 02:42:18 -0500 (EST)
Received: from webmail4.ns.utoronto.ca ([128.100.132.34] EHLO webmail4.ns.utoronto.ca ident: IDENT-NOT-QUERIED [port 46605]) by bureau6.utcc.utoronto.ca with ESMTP id <239158-28237>; Tue, 13 Nov 2001 02:42:10 -0500
Received: by webmail4.ns.utoronto.ca id <164259-209>; Tue, 13 Nov 2001 02:42:02 -0500
To: egs@CS.Cornell.EDU
Subject: 615 PAPER 42
Message-ID: <1005637308.3bf0cebc0c3d4@webmail.utoronto.ca>
Date: Tue, 13 Nov 2001 02:41:48 -0500 (EST)
From: c.tavoularis@utoronto.ca
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: 8bit
User-Agent: IMP/PHP IMAP webmail program 2.2.3

The most recent goal of sensor networks, as seen in the implementation of 
SmartDust and TinoOS, is to make tiny yet effective ‘motes’ that can handle 
computing and communication.

Sensor networks have many useful applications. They serve the military for 
surveillance and monitoring. They can monitor environmental conditions such as 
temperature and humidity from which statistics can be gathered for things such 
as animal or plant behavior or product quality. Other functionality includes 
automatic inventory and virtual keyboards. The best way for sensor network 
technology to accommodate these tasks is to have discrete nature, low cost and 
easy deployment. SmartDust and TinyOS attempt to reach the extremities of size 
reduction, as small as a square-millimeter, using inexpensive off-the-shelf 
hardware components. Sensor networks achieve easy deployment by nature of self-
initializing multi-hop routing.

A key to the functionality of SmartDust is preserving energy. Preserving energy 
prolongs the life of individual sensors and the network as a whole, and reduces 
cost. This is particularly aided by the micro-controller that also controls 
power consumption. In fact, much of the mote is powered off most of the time, 
while a few timers allow parts of the mote to power on to perform a task and 
power off again. There are timers to control only the major parts of the mote 
including the micro-controller and the receiver.  Motes happen to use lasers 
for communication in a particularly energy efficient manner. Motes simply 
reflect a laser generated by the base station in an appropriate direction to 
transmit data to any other mote in the network. The motes are also adaptable 
and can accept code via the wireless communication interface that will change 
their functionality. 

TinyOS is an event-based environment that handles concurrent operations at each 
of the nodes in a sensor network. TinyOS must also minimize overhead, and does 
so by managing non-blocking states for each module with fine-grained 
concurrency. It similarly uses inexpensive off-the-shelf hardware.

Both the aforementioned systems achieve impressive results. It is interesting 
to compare and contrast the two implementations, since one is software oriented 
and the other hardware.

