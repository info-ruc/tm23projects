Received: from exchange.cs.cornell.edu (exchange.cs.cornell.edu [128.84.97.8])
	by sundial.cs.cornell.edu (8.11.3/8.11.3/M-3.7) with ESMTP id fADGr2R14835
	for <egs@popsrv.cs.cornell.edu>; Tue, 13 Nov 2001 11:53:02 -0500 (EST)
content-class: urn:content-classes:message
MIME-Version: 1.0
Content-Type: text/plain;
	charset="iso-8859-1"
Subject: cs615 PAPER 42
X-MimeOLE: Produced By Microsoft Exchange V6.0.4712.0
Date: Tue, 13 Nov 2001 11:53:01 -0500
Message-ID: <706871B20764CD449DB0E8E3D81C4D4301E7F28F@opus.cs.cornell.edu>
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
Thread-Topic: cs615 PAPER 42
Thread-Index: AcFsY6gFiBCyA+r7TVWUA8FqMs7GjA==
From: "Venu Ramasubramanian" <ramasv@CS.Cornell.EDU>
To: "Emin Gun Sirer" <egs@CS.Cornell.EDU>
Content-Transfer-Encoding: 8bit
X-MIME-Autoconverted: from quoted-printable to 8bit by sundial.cs.cornell.edu id fADGr2R14835

Tiny Networked Sensors: Motes, Sensor Dust, and TinyOS

	Small networked devices with sensing capability are going to
widely deployed and used in future.  This project highlights one of the
most important characteristics of  such devices - their variability.
Sensors could come in all shapes and sizes: for example, motes (few
cubic millimeters), Ninjas (few cubic inches) etc.  Sensors also have
wide variation of capacities in terms of networking harware, processor
limitations, power consumption.  There are further constaints from the
kind of enviroments they are deployed in for example: forest fire, sea
bed, building, etc. that affects the mobility, bandwidth availability
and power availability.   The TinyOS project concerns itself mainly with
handling sensors with RF radios and 8-bit processor deployed in a static
setting.

	The presence of a processor and other devices demands an
operating system and the embedded nature of the CPU necessitates an OS
that is effecient in terms of space, time and power consumption.  TinyOS
is an operating system that conforms to these requirements.  TinyOS
presents two classes of execution - tasks and events.  Tasks are like
processes that have state, stack and computation associated with them
and deployed by a scheduler.  Events are asynchronously generated
signals that can pre-empt tasks.  Device interfaces as well as software
components modeled to have state, tasks and signals associated with
them.  This kind of component based interface allows the OS to be ported
to different kinds of hardware by changing just a few components. One of
the drawbacks of this system is the compile time binding of interfaces
that prevents on-line addition of applications and necessitates
compilation and reloading upon changes in components.

	In the absence of a wall outlets most of the sensor devices
would be expected to depend on battery power. Thus power forms a
significant constraint and communication hardware often tends to consume
a most of the power.  It is interesting to see to interesting designs to
tackle this problem and prevent excessive power consumption.  Motes
reflect laser light creating light flashes that can be interpreted as
bits.  While the throughput of this scheme may not be very high, it does
end up using practicaly little power to communicate.  However line-of
sight limitations and the need for a nearby laser source might limit the
use of this technique.  Bit level modulation can however also end up
conserving a lot of power as the transmission power depends on packet
size.  Using 1 bit messages for periodic beacons allows this network to
funciton for long periods of time.  Such modifications to hardware might
prove quite beneficial in the long run.
	 

