Received: from memphis.ece.cornell.edu (memphis.ece.cornell.edu [128.84.81.8])
	by sundial.cs.cornell.edu (8.11.3/8.11.3/M-3.7) with ESMTP id fA134fR10119
	for <egs@cs.cornell.edu>; Wed, 31 Oct 2001 22:04:42 -0500 (EST)
Received: from james (james.ee.cornell.edu [128.84.236.65])
	by memphis.ece.cornell.edu (8.11.6/8.11.2) with ESMTP id fA134QJ02578
	for <egs@cs.cornell.edu>; Wed, 31 Oct 2001 22:04:26 -0500
Date: Wed, 31 Oct 2001 22:03:03 -0500 (EST)
From: Edward Hua <eyh5@ece.cornell.edu>
To: egs@CS.Cornell.EDU
Subject: 615 Paper 31
Message-ID: <Pine.GSO.4.21.0110312202050.3657-100000@james.ee.cornell.edu>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII

Semantic File Systems
David K. Gifford, Pierre Jouvelot, Mark A. Sheldon, Jkames W. O'Toole, Jr.

	A semantic file system is an information storage system that
provides flexible associative access to the system's contents by
automatically extracting attributes from files with file-type-specific
transducers. In this scheme, the user-programmable transducers use
information about the semantics of the file system objects to extract the
properties for file indexing. One of the advantages of a semantic file
system, as the authors claim, is its ease of intergrating into existing
file systems.

	In a semantic file systems, queries can be mapped into
tree-structured path names. Queries are performed by means of virtual
directories to describe a desired view of file system contents. Unlike
conventional directories, virtual directories do not have to be explicitly
created to be accessed. This therefore has the advantage of convserving
disk space in the server. A field virtual directory contains one entry for
each possible value of its corresponding field, and these entries are
collectively called value virtual directories, each of which has one entry
for each entity described by the field-value pair. This forms the basis of
rapid indexing in the semantic file system, as the field-value pair
uniquely refers to a specific entry that is a symbolic link to the actual
file.

	The authors of the paper have implemented a semantic file system
and evaluated its performance. The experiment of indexing a large number
of user files is done with both full update and incremental indexing. Two
positive results are extracted from the experiment to support the authors'
claim that the semantic file system is more effective than a traditional
file system for information sharing: the savings in time in linear search
through the entire file system and the ease of the integration of semantic
file system with the existing programs in the development system. 

	This paper was written in 1991, way before the revolution in
Internet and networking technologies took place. However, it is not hard
to discern traces of its feature that can be found in some of today's more
popular programming languages that assist system administrators' daily
tasks. For example, the semantic file system shares very similar traits as
the Oracle database maintenance language. This paper can therefore be said
as laying the foundation for the future generation of programming
languages that facilitate the operation and administration of large
systems and networks. 


