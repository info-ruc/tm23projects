Received: from bureau6.utcc.utoronto.ca (bureau6.utcc.utoronto.ca [128.100.132.16])
	by sundial.cs.cornell.edu (8.11.3/8.11.3/M-3.7) with ESMTP id fAJHrqR13506
	for <egs@cs.cornell.edu>; Mon, 19 Nov 2001 12:53:53 -0500 (EST)
Received: from webmail2.ns.utoronto.ca ([128.100.132.25] EHLO webmail2.ns.utoronto.ca ident: IDENT-NOT-QUERIED [port 48358]) by bureau6.utcc.utoronto.ca with ESMTP id <238526-4416>; Mon, 19 Nov 2001 12:53:41 -0500
Received: by webmail2.ns.utoronto.ca id <24411-13842>; Mon, 19 Nov 2001 12:53:28 -0500
To: egs@CS.Cornell.EDU
Subject: 615 PAPER 60
Message-ID: <1006192401.3bf947119e702@webmail.utoronto.ca>
Date: Mon, 19 Nov 2001 12:53:21 -0500 (EST)
From: c.tavoularis@utoronto.ca
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: 8bit
User-Agent: IMP/PHP IMAP webmail program 2.2.3

This paper proposes the Freenet network application to store files and allow 
users to access files privately and completely unaware of physical location. 
Freenet behaves as an adaptive peer-to-peer system that uses a network of 
identical nodes for storage and routing to avoid central points of failure or 
attack. Freenet dynamically creates replicas of files near the requestors and 
removes files in areas where they are no longer needed.

Freenet operates as a peer-to-peer system where nodes request a file store or 
retrieve service to their immediate neighbors using a location-independent 
naming key. Requests are forwarded hop-by-hop similar to IP routing and have a 
limited hops-to-live as well as a unique random id number to avoid loops in 
routing. Each node has a data store to which it must allow network access, as 
well as a dynamic routing table with keys associated with node addresses. File 
keys are generated using hash functions. Each file has a random public/private 
key pair to serve as a namespace called a signed-subspace key (SSK) and a 
keyword-signed key (KSK) generated by short descriptive text. A user will 
publish his descriptive string and subspace public key, which maintaining his 
private key so no one can add files to his subspace. A content-hash key is 
useful for updating and splitting of files since the old version of the file 
remains temporarily available while a new version is been added to the system. 
There is more than one solution proposed to search for keys, including 
insertion of indirect files by users with pointers to the real files, and 
publicizing of public key compilations by users.

Once the file key is known, a user will ask its node to retrieve the file. This 
node will check it’s own data store, and use its routing table to forward the 
request to a neighboring node if it does not have a copy of the file. Requests 
propagate as a steepest-ascent hill-climbing search with backtracking until the 
file is found or the request times out. A similar search is performed to insert 
new files. Similar keys are located and success is returned if the hops-to-live 
is reached without any collisions. Essentially, a trend is supposed to form 
where nodes become experts on similar keys located on the same node, and 
caching brings copies of files closer to the requestor. When the system starts 
running out of storage, the least recently used files are replaced. Security in 
the system is achieved by enforcing anonymous requestors and senders, as well 
employing a cryptographic protocol to add new nodes to the system.

Freenet provides redundancy, privacy and robustness to central points of 
failure. Freenet’s performance converges over time to reduce path length 
request. It would perform less impressively if a file is frequently being 
updated such that large amounts of overhead is created, and cached data will 
easily become stale as well as the information in routing tables. In this case, 
the fact that there are mirrored copies closer to the requestor is irrelevant 
and the search mechanism becomes inefficient. Also, it is not clear what 
happens if a user specifically wants to remove his file.

