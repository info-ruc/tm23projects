Received: from memphis.ece.cornell.edu (memphis.ece.cornell.edu [128.84.81.8])
	by sundial.cs.cornell.edu (8.11.3/8.11.3/M-3.7) with ESMTP id fA1HbPR24879
	for <egs@CS.Cornell.EDU>; Thu, 1 Nov 2001 12:37:25 -0500 (EST)
Received: from ee.cornell.edu (hegel.ee.cornell.edu [128.84.236.63])
	by memphis.ece.cornell.edu (8.11.6/8.11.2) with ESMTP id fA1Hb5J17866
	for <egs@CS.Cornell.EDU>; Thu, 1 Nov 2001 12:37:05 -0500
Sender: papadp@ece.cornell.edu
Message-ID: <3BE18837.ADCC515C@ee.cornell.edu>
Date: Thu, 01 Nov 2001 12:36:55 -0500
From: Panagiotis Papadimitratos <papadp@ece.cornell.edu>
Reply-To: papadp@ece.cornell.edu
Organization: Cornell University
X-Mailer: Mozilla 4.51 [en] (X11; I; SunOS 5.7 sun4u)
X-Accept-Language: el, fr-FR, en
MIME-Version: 1.0
To: Emin Gun Sirer <egs@CS.Cornell.EDU>
Subject: 615 PAPER 31
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit


Review of:"Semantic File Systems," by D.K. Gifford, P. Jouvelot, M.A.
Sheldon, J.W.O'Toole

Panagiotis Papadimtratos papadp@ece.cornell.edu

The Semantic File System (SFS) provides an abstraction of existing file
systems by introducing an associative access based on files' attributes.
The attributes are content-based values and the interface provided by
SFS resembles the one of classical file systems; an SFS access results
in a 'virtual directory', i.e., a set of symbolic links to the
associated files. 


Moreover, SFS provides a programming interface that allows for a
finer-grain definition of attribute extraction. This is possible through
user-defined 'transducers', i.e., tools that 'understand' the semantics
of different types of files and generate indexing structures to the
corresponding files. In effect, transducers define the framework of
querying mechanisms and the resultant list of files, according to the
sought attribute(s), constitute a virtual directory, whose name is in
essence the name of a query. 

The apparent benefits of such an approach can be summarized in the
flexibility to define full-custom user-defined associative access that
can support effectively collabortive environments, and backward
compatibility. The latter one is due to the adherence to the file-system
interface (see above - symbolic links), that provides transparent access
to the SFS structure. On the other hand, there is a trade-off between
latencies to retrieve the SFS data and the increasing size of the
indices (and programmable units) that are needed to support such a
system. This appears to hinder an SFS approach from co-existing with a
'legacy' system; the issue of SFS and non-SFS systems interaction is a
different one.

