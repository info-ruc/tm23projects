Received: from exchange.cs.cornell.edu (exchange.cs.cornell.edu [128.84.97.8])
	by sundial.cs.cornell.edu (8.11.3/8.11.3/M-3.7) with ESMTP id fAKGmLR01803
	for <egs@popsrv.cs.cornell.edu>; Tue, 20 Nov 2001 11:48:21 -0500 (EST)
X-MimeOLE: Produced By Microsoft Exchange V6.0.4712.0
content-class: urn:content-classes:message
MIME-Version: 1.0
Content-Type: text/plain;
	charset="iso-8859-1"
Subject: cs615 PAPER 60
Date: Tue, 20 Nov 2001 11:48:21 -0500
Message-ID: <706871B20764CD449DB0E8E3D81C4D4301E7F295@opus.cs.cornell.edu>
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
Thread-Topic: cs615 PAPER 60
Thread-Index: AcFx4ymW4XfWEAZNTguMiNPbISS/5w==
From: "Venu Ramasubramanian" <ramasv@CS.Cornell.EDU>
To: "Emin Gun Sirer" <egs@CS.Cornell.EDU>
Content-Transfer-Encoding: 8bit
X-MIME-Autoconverted: from quoted-printable to 8bit by sundial.cs.cornell.edu id fAKGmLR01803

FREENET: A Distributed Anonymous Information Storage and Retrieval
System.

	This paper presents an architecture for a robust and anonymous
completely distributed information storage and retrieval system.  This
is a peer-peer system that distributes data throughout the internet on
nodes willing to participate. The features that make this system very
interesting are sender and receiver anonymity, failure robustness,
absence of any centralization and ability to scale. 

	Data (file) in this system is identified by means of a key that
is a hash of the data name.  An asymmetric key pair is generated from
this name that serves to authenticate the data.  The data is further
encypted by key that is obtained by hasing the contents.  While the data
creators can easily compute the data, it is a mystery how a node in need
of data would be able to obtain the keys for the corresponding data.  It
is also further required that the requestor obtain the key without
exposing itself to the world and also without knowing the sender.
Although there is a proposal in the paper on how to do this, they do not
elaborate this further and hence does not seem to be a part of their
system.

	The routing protocol however, looks real neat.  More data is
distributed in the network as more and more requests keep getting
generated.  The idea of caching data of similar keys close together
greatly eases the overhead on the routing protocol.   Making the data
inserts in a way identical to data requests is cute and effective.  The
requests are tagged with a TTL field and the protocol depends on the
obscurity of this field to prevent sender and receiver anonymity.
However it appears that a long term analysis of network activity around
a requestor might raise suspicions.  The routing protocol also does not
attempt to balance the load across intermediate nodes.  On the whole,
this is a very interesting idea. Lot's of people would be pleased with
sender and receiver anonymity. 

