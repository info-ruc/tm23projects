Received: from smtp1.a2000.nl (farida.a2000.nl [62.108.1.19])
	by aleve.media.mit.edu (8.9.1a/8.9.1/+ALEVE) with ESMTP id GAA20355
	for <handyboard@media.mit.edu>; Sun, 8 Aug 1999 06:46:55 -0400 (EDT)
Received: from node0ae1.a2000.nl ([62.108.10.225] helo=default)
	by smtp1.a2000.nl with smtp (Exim 2.02 #4)
	id 11DQTb-0006jd-00
	for handyboard@media.mit.edu; Sun, 8 Aug 1999 12:46:51 +0200
Message-Id: <005701bee18c$8c937e60$e10a6c3e@a2000.nl>
From: "Jaron" <j.paludanus@cable.a2000.nl>
To: <handyboard@media.mit.edu>
Subject: Code optimization
Date: Sun, 8 Aug 1999 12:55:38 +0200
Mime-Version: 1.0
Content-Type: text/plain;
	charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
X-Priority: 3
X-Msmail-Priority: Normal
X-Mailer: Microsoft Outlook Express 5.00.2314.1300
X-Mimeole: Produced By Microsoft MimeOLE V5.00.2314.1300

Howdy 3,

To get most out of my Handyboard I am using a 'normal' ANSI C compiler (from
cosmic) which works fine. Now my question is about the use of variables. I
gathered quite some reference material for the Handyboard from the net and
found that most programmers use integers very often. But isn't it so that
the 68HC11 is much more efficient at dealing with 8-bit values?

I am currently storing all variables used by system drivers (pwm / lcd etc)
in the zero-page to take advantage of the immediate addressing mode and save
some cycles. Also I replaced most integers for characters and instructed the
compiler not to expand them again to integer when pushed on the stack or
used in a register (which is not default ANSI C behaviour).

Is this like common procedure to produce tighter, faster code or are the
savings in execution minimal ?

Thanks,
Jaron Paludanus




