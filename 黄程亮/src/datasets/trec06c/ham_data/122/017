Received: from penguin.cs.cornell.edu (penguin.cs.cornell.edu [128.84.96.11])
	by sundial.cs.cornell.edu (8.11.7-20031020/8.11.7/M-3.25) with ESMTP id k3IGWs202220
	for <egs+summary@cs.cornell.edu>; Tue, 18 Apr 2006 12:32:54 -0400 (EDT)
Received: from turing.cs.hmc.edu ([134.173.42.99]) by penguin.cs.cornell.edu with Microsoft SMTPSVC(6.0.3790.1830);
	 Tue, 18 Apr 2006 12:31:52 -0400
Received: from knuth.cs.hmc.edu (knuth.cs.hmc.edu [134.173.42.100])
	by turing.cs.hmc.edu (Postfix) with ESMTP
	id A4F5253201; Tue, 18 Apr 2006 09:08:33 -0700 (PDT)
Received: by knuth.cs.hmc.edu (Postfix, from userid 34382)
	id 93A7DBF46; Tue, 18 Apr 2006 09:08:33 -0700 (PDT)
Date: Tue, 18 Apr 2006 09:08:33 -0700
From: Victoria Krafft <vmk@cs.hmc.edu>
To: egs+summary@cs.cornell.edu
Subject: PAPER 22
Message-ID: <20060418160833.GB7659@cs.hmc.edu>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
User-Agent: Mutt/1.5.9i
X-OriginalArrivalTime: 18 Apr 2006 16:31:52.0592 (UTC) FILETIME=[99616100:01C66305]

MACEDON and P2 are both systems which allow peer-to-peer networks to
be quickly coded and tested; rather than writing thousands of lines of
code, these systems allow overlay networks to be specified in a
concise, domain-specific manner.

MACEDON is designed to simplify the design, implementation, and
evaluation of large-scale overlays.  A researcher gives MACEDON a
high-level specification in terms of a finite state machine, and
MACEDON generates C++ code.  The authors have re-written several
well-known peer-to-peer applications in MACEDON, and their experiments
show that MACEDON produces efficient code for those applications.  In
many ways, the MACEDON code reminds me of higher-level languages such
as python and perl; it takes care of the gory details, so a researcher
can focus on the algorithm.

P2 uses a declarative logic language to specify the overlays, and a
dataflow framework to maintain the overlays, rather than a finite
state machine.  To specify the overlay networks, they developed a
language called OverLog, which is similar to ProLog and DataLog.  In
this language, the amount of code a researcher has to write drops
further; for example, Chord can be specified with 47 logic rules,
while MACEDON used 320 lines.  However, I think that OverLog looks
much more complicated than the specifications MACEDON requires, so
this may not actually save the researcher any time.

Both of these systems are designed to cut down on the amount of work a
researcher needs to do.  However, the number of lines of code does not
necessarily reflect the amount of time the researcher has to spend to
get the system working; tracking down bugs could easily take more time
once another layer of abstraction is introduced.  In addition, the
researcher may want to modify code at a lower level than these systems
allow for; modifications to wire protocols, or specific rules for
choosing neighbors, are not allowed under these systems.  With the
increasing use of high-level languages such as Python, systems such as
MACEDON and P2 may become less useful.

-- Victoria Krafft

