Received: from authusersmtp.mail.cornell.edu (granite1.mail.cornell.edu [128.253.83.141])
	by sundial.cs.cornell.edu (8.11.7-20031020/8.11.7/M-3.25) with ESMTP id k3P3NM205976
	for <egs+summary@cs.cornell.edu>; Mon, 24 Apr 2006 23:23:22 -0400 (EDT)
Received: from dreadnought.cornell.edu (r253240123.resnet.cornell.edu [128.253.240.123])
	(authenticated bits=0)
	by authusersmtp.mail.cornell.edu (8.13.1/8.12.10) with ESMTP id k3P3NIU8004276
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=NOT)
	for <egs+summary@cs.cornell.edu>; Mon, 24 Apr 2006 23:23:22 -0400 (EDT)
Message-Id: <6.2.1.2.2.20060422234654.02ffdab8@postoffice8.mail.cornell.edu>
X-Mailer: QUALCOMM Windows Eudora Version 6.2.1.2
Date: Sun, 23 Apr 2006 03:38:33 -0400
To: egs+summary@cs.cornell.edu
From: Ari Rabkin <asr32@cornell.edu>
Subject: PAPER 24
Mime-Version: 1.0
Content-Type: text/plain; charset="us-ascii"; format=flowed



Seti@Home:
         Seti@Home is a system for massively distributed analysis of radio 
telescope data by idle hosts at the edge of the internet.  It runs as a 
screensaver on user desktops.  The analysis is mostly Fourier 
decomposition--CPU intensive, not requiring much storage, and readily 
repeated and verified to control for error.  Code and data is distributed 
under signature.  Seti@Home is build on top of the BOINC toolkit for 
distributed computation.
         BOINC is most applicable for CPU-bound tasks that can be divided 
into small data chunks, since bandwidth to edge nodes is limited.  The 
central server must hand out every work unit, imposing substantial 
burden.  The system has a number of worrisome security aspects.  First, 
users must trust the supplier of the code--there is no sandboxing, so a 
malicious application can compromise user machines.  Second, an attacker 
might be able to "upgrade" a user's machine back to a previously released 
(and signed) version of the application code, in which vulnerabilities have 
been found.  BOINC would be much improved by sandboxing.


CCOF:
         CCOF is a system for "cluster computing on the fly" -- for 
assigning cycle-intensive tasks to idle machines.  CCOF offers algorithms 
for large workpile batch compute tasks, as well as point-of-presence 
tasks.  The large workpile algorithm involves building a CAN and assigning 
nodes to locations based on their timezone, so that tasks can be given to 
idle machines during local night. The intent of this is to ensure that 
machines donating cycles are likely to be idle for long periods.
         The insight motivating the CCOF system is that machines are likely 
to be idle for long blocks during night hours.  I'm writing this summary at 
3:30 am, so this seems like an undue assumption.  Moreover, it assumes that 
machines have their timezone set correctly.  As its underlying substrate, 
it uses a CAN.  This makes me suspect that CCOF doesn't really exist, since 
I am unaware of any CAN implementations.




Ari Rabkin  asr32@cornell.edu      Risley Hall 454   3-2842

The resources of civilization are not yet exhausted.
         --William Gladstone 

