Received: from penguin.cs.cornell.edu (penguin.cs.cornell.edu [128.84.96.11])
	by sundial.cs.cornell.edu (8.11.7-20031020/8.11.7/M-3.25) with ESMTP id k3PH1o218738
	for <egs+summary@cs.cornell.edu>; Tue, 25 Apr 2006 13:01:50 -0400 (EDT)
Received: from pproxy.gmail.com ([64.233.166.176]) by penguin.cs.cornell.edu with Microsoft SMTPSVC(6.0.3790.1830);
	 Tue, 25 Apr 2006 13:00:58 -0400
Received: by pproxy.gmail.com with SMTP id b36so193261pyb
        for <egs+summary@cs.cornell.edu>; Tue, 25 Apr 2006 10:00:57 -0700 (PDT)
DomainKey-Signature: a=rsa-sha1; q=dns; c=nofws;
        s=beta; d=gmail.com;
        h=received:message-id:date:from:to:subject:mime-version:content-type;
        b=hw6oUKdTZ3IOe8dAR6eKY4GUEFDU7wLgX0riH1JKpZicSt3peh5KwJxu6w0VX5QyadgYmPjYMgL7BnvfatgsyQQZAPosDTVp6ION8IZJtUbVEi2Jh9vDzk2Vmjo1Rg40TYrQbeWgHYM+loMdrwUrf6PDQ5ljosywEj8aSlVLl9k=
Received: by 10.35.49.4 with SMTP id b4mr2428539pyk;
        Tue, 25 Apr 2006 10:00:57 -0700 (PDT)
Received: by 10.35.125.16 with HTTP; Tue, 25 Apr 2006 10:00:57 -0700 (PDT)
Message-ID: <9aa7a97d0604251000w18fe0b10p3e054d5796d4ae06@mail.gmail.com>
Date: Tue, 25 Apr 2006 13:00:57 -0400
From: "Andrew Cunningham" <lackhand@gmail.com>
To: egs+summary@cs.cornell.edu
Subject: PAPER 24
MIME-Version: 1.0
X-Security: message sanitized on sundial.cs.cornell.edu
	See http://www.impsec.org/email-tools/sanitizer-intro.html
	for details. $Revision: 1.148 $Date: 2004-12-19 11:59:17-08 
X-Security: The postmaster has not enabled quarantine of poisoned messages.
Content-Type: multipart/alternative; 
	boundary="----=_Part_7615_26869454.1145984457547"
X-OriginalArrivalTime: 25 Apr 2006 17:00:58.0142 (UTC) FILETIME=[D2B36BE0:01C66889]

------=_Part_7615_26869454.1145984457547
Content-Type: text/plain; charset=ISO-8859-1
Content-Disposition: inline
Content-Transfer-Encoding: quoted-printable

Andrew Cunningham
arc39
    Cluster Computing on the Fly: P2P Scheduling of Idle Cycles in the
Internet
    Virginia Lo, Daniel Zappala, Dayi Zhou, Yuhong Liu, and Shanyu Zhao

    This system seeks to harvest cycles from ordinary users in an open
access, non-institutional environment. It encompasses all activities
involved in the management of idle cycles -- overlay construction for hosts
donating cycles, resource discovery within the overlay, application-based
scheduling, local scheduling on the host node, and meta-level scheduling
among a community of application-level schedulers. Four important classes o=
f
cycle sharing application are identified and given outlines of requirements
-- workpile, workpile with deadlines, tree based search, and
point-of-presence. They then describe the Wave Scheduler for workpile tasks
that exploits the Earth's day-and-night nature to harvest idle cycles, and
the Point of Presence scheduler to discover and schedule hosts that meet
application-specific requirements for location, topology, and resources.
    What the paper does not present is a working system that implements
these ideals, nor the specifics of task migration, which are of course
application specific, but equally, the most important part of the system.
What is covered is when and to where the migration must occur. This is
useful and an elegant solution, but severely restricts the class of
applications which can be run, namely, to those which can be easily migrate=
d
every twelve hours. Another restriction is that, while mention is made of
security concerns, they are not truly addressed -- for a system intended to
run application code, a user of this system has no guarantees about the
safety of their system or the legitimacy of code, while the entity which
provides the code has several guarantees, due to the quizzing subsystem.
Thus the security model is flawed in several ways, since there is no
incentive other than the purely altruistic one to run this system, but good
reasons not to.

------=_Part_7615_26869454.1145984457547
Content-Type: text/html; charset=ISO-8859-1
Content-Disposition: inline
Content-Transfer-Encoding: quoted-printable

Andrew Cunningham<br>
arc39<br>
&nbsp;&nbsp; &nbsp;Cluster Computing on the Fly: P2P Scheduling of Idle Cyc=
les in the Internet<br>
&nbsp;&nbsp; &nbsp;Virginia Lo, Daniel Zappala, Dayi Zhou, Yuhong Liu, and =
Shanyu Zhao<br>
&nbsp;&nbsp; &nbsp;<br>
&nbsp;&nbsp; &nbsp;This system seeks to harvest cycles from ordinary
users in an open access, non-institutional environment. It encompasses
all activities involved in the management of idle cycles -- overlay
construction for hosts donating cycles, resource discovery within the
overlay, application-based scheduling, local scheduling on the host
node, and meta-level scheduling among a community of application-level
schedulers. Four important classes of cycle sharing application are
identified and given outlines of requirements -- workpile, workpile
with deadlines, tree based search, and point-of-presence. They then
describe the Wave Scheduler for workpile tasks that exploits the
Earth's day-and-night nature to harvest idle cycles, and the Point of
Presence scheduler to discover and schedule hosts that meet
application-specific requirements for location, topology, and resources.<br=
>
&nbsp;&nbsp; &nbsp;What the paper does not present is a working system
that implements these ideals, nor the specifics of task migration,
which are of course application specific, but equally, the most
important part of the system. What is covered is when and to where the
migration must occur. This is useful and an elegant solution, but
severely restricts the class of applications which can be run, namely,
to those which can be easily migrated every twelve hours. Another
restriction is that, while mention is made of security concerns, they
are not truly addressed -- for a system intended to run application
code, a user of this system has no guarantees about the safety of their
system or the legitimacy of code, while the entity which provides the
code has several guarantees, due to the quizzing subsystem. Thus the
security model is flawed in several ways, since there is no incentive
other than the purely altruistic one to run this system, but good
reasons not to.

------=_Part_7615_26869454.1145984457547--

