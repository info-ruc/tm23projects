Received: from penguin.cs.cornell.edu (penguin.cs.cornell.edu [128.84.96.11])
	by sundial.cs.cornell.edu (8.11.7-20031020/8.11.7/M-3.25) with ESMTP id k3P443214231
	for <egs+summary@cs.cornell.edu>; Tue, 25 Apr 2006 00:04:03 -0400 (EDT)
Received: from postoffice10.mail.cornell.edu ([132.236.56.14]) by penguin.cs.cornell.edu with Microsoft SMTPSVC(6.0.3790.1830);
	 Tue, 25 Apr 2006 00:03:12 -0400
Received: from orpheus3.dataserver.cornell.edu (orpheus3.dataserver.cornell.edu [128.253.161.167])
	by postoffice10.mail.cornell.edu (8.12.10/8.12.6) with ESMTP id k3P43AEf018022;
	Tue, 25 Apr 2006 00:03:11 -0400 (EDT)
Message-ID: <1652260983.1145937789754.JavaMail.webber@orpheus3.dataserver.cornell.edu>
Date: Tue, 25 Apr 2006 00:03:09 -0400 (EDT)
From: Gopal Parameswaran <gp72@cornell.edu>
To: egs+summary@cs.cornell.edu
Subject: PAPER 24
Cc: gp72@cornell.edu
Mime-Version: 1.0
Content-Type: text/plain; charset=UTF-8
X-Mailer: uPortal WEB email client 3.0
X-OriginalArrivalTime: 25 Apr 2006 04:03:12.0441 (UTC) FILETIME=[2BC68A90:01C6681D]
Content-Transfer-Encoding: 8bit
X-MIME-Autoconverted: from quoted-printable to 8bit by sundial.cs.cornell.edu id k3P443214231

Cluster Computing on the Fly
This paper discusses the application of peer to peer in cluster computing and harvesting cycles from ordinary users in an open access, non institutional environment and discusses the different forms of harnessing the idle computer cycles and then concludes with a scheduling method based on usages on night time free times for machines. As the author states the goal of this paper is to develop a scheduling infrastructure that can support automatic scheduling for p2p cycle sharing applications viz. Infinite workpile applications such as SETI which require a massive amount of computation time and usually operates under a master slave mode based scheduling of jobs, workpile applications with deadlines which are similar to the infinite workpiles but are on a smaller scale and are driven by deadlines and Tree and point of presence based applications. However the peer to peer communityâ€™s main contributions would come as the author suggests in an open P2p cycle sharing environment where different hosts can share their cycles and take advantage of the vast resources of a global network of machines especially that is disparate in terms of free cycle times due to the different time zones resulting in different periods of inactivity for the machines. The authors approach relies on distributed schedulers with localized schedulers scheduling tasks across a local geographic region that constitutes a time zone with a global application scheduler that looks into scheduling requirements and managing and verifying results. Their concept called wave scheduler seeks to capture cycles from the millions of machines idle at night by following time zones which are represented in a CAN overlay with time zone being chosen as one of the dimensions in the d-dimensional mesh. When a host joins the network and wishes to share its cycles it randomly selects a node label and joins the network in the time zone in which it is. The application scheduler knows which time zones are night time zones and decides on the number of hosts that a particula
ion of the scheduling if it was done partly with the local scheduler with the application scheduler deciding on the ration of allocation to different time zones and letting the local scheduler decide on the actual local scheduling in a time zone would have resulted in a more intelligent control. The authors have explored an area of application for peer to peer which I believe could be the future of computing for the ordinary users.

