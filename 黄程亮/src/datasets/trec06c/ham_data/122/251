Received: from penguin.cs.cornell.edu (penguin.cs.cornell.edu [128.84.96.11])
	by sundial.cs.cornell.edu (8.11.7-20031020/8.11.7/M-3.25) with ESMTP id k3PFWs226430
	for <egs+summary@cs.cornell.edu>; Tue, 25 Apr 2006 11:32:54 -0400 (EDT)
Received: from authusersmtp.mail.cornell.edu ([128.253.83.141]) by penguin.cs.cornell.edu with Microsoft SMTPSVC(6.0.3790.1830);
	 Tue, 25 Apr 2006 11:32:13 -0400
Received: from KEVSTOY (cpe-69-207-37-246.twcny.res.rr.com [69.207.37.246])
	(authenticated bits=0)
	by authusersmtp.mail.cornell.edu (8.13.1/8.12.10) with ESMTP id k3PFWDYa022428
	(version=TLSv1/SSLv3 cipher=RC4-MD5 bits=128 verify=NOT)
	for <egs+summary@cs.cornell.edu>; Tue, 25 Apr 2006 11:32:13 -0400 (EDT)
Message-ID: <000501c6687d$8dfdd0a0$f625cf45@KEVSTOY>
Reply-To: "Kevin" <yobz@cornell.edu>
From: "Kevin" <km266@cornell.edu>
To: <egs+summary@cs.cornell.edu>
Subject: PAPER 24
Date: Tue, 25 Apr 2006 11:33:08 -0400
MIME-Version: 1.0
Content-Type: text/plain;
	format=flowed;
	charset="iso-8859-1";
	reply-type=original
Content-Transfer-Encoding: 7bit
X-Priority: 3
X-MSMail-Priority: Normal
X-Mailer: Microsoft Outlook Express 6.00.2900.2869
X-MimeOLE: Produced By Microsoft MimeOLE V6.00.2900.2869
X-OriginalArrivalTime: 25 Apr 2006 15:32:13.0843 (UTC) FILETIME=[6D2BDE30:01C6687D]

Cluster Computing on the Fly presents and gives history on cycle-sharing 
applications.  First, they go into the four broad categories: infinite 
workpile applications, workpiles with deadlines, tree-based search, and 
point-of-presence applications.  Infinite workpile applications, like 
SETI@home, have a master-slave architecture that follows the standard 
server-client paradigm.  The server sends out CPU-intensive work to be 
processed by the slaves, which reply with the result once it is computed. 
Workpiles with deadlines are similar to infinite workpiles but these have 
deadlines, usually measured in days or weeks.  Tree-based applications have 
many server-client relationships: a child node is your client while your 
parent node is your master.  The entire tree is a cycle-sharing structure. 
Finally point-of-presence applications consume few cycles but are present 
all over the place: they might try to try latency, bandwidth, or other 
things all over the physical internet.  The goal of the paper's 
contribution, wave scheduling, is to help the infinite workpile effectively 
get cycles during the nighttime.  The network is organized such that nodes 
are in the system if it is nighttime there, sharing their cycles with the 
community.
It seems a bit odd that the authors only want cycles shared at night.  While 
it might be a general trend that people don't use their computers at night, 
a lot of people probably leave them on during the day while they are at work 
and other times, detecting idleness might be a better goal here... 

