Received: from donald.cybercomm.nl (donald.cybercomm.nl [194.235.113.5])
	by aleve.media.mit.edu (8.8.7/ML970927) with ESMTP id NAA29401
	for <handyboard@media.mit.edu>; Mon, 12 Oct 1998 13:42:50 -0400 (EDT)
Received: from default (poort42-ip-x2.enertel.cybercomm.nl [194.235.118.42])
	by donald.cybercomm.nl (8.8.6/8.8.6) with SMTP id SAA29218
	for <handyboard@media.mit.edu>; Mon, 12 Oct 1998 18:45:10 -0100 (MET)
From: "Jaron Paludanus" <jaron@cybercomm.nl>
To: "HandyBoard" <handyboard@media.mit.edu>
Subject: Improving the analog drivers
Date: Mon, 12 Oct 1998 19:50:28 +0200
Message-Id: <000001bdf608$cc8ff680$2a76ebc2@default>
Mime-Version: 1.0
Content-Type: text/plain;
	charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
X-Priority: 3 (Normal)
X-Msmail-Priority: Normal
X-Mailer: Microsoft Outlook 8.5, Build 4.71.2173.0
Importance: Normal
X-Mimeole: Produced By Microsoft MimeOLE V4.72.2106.4

Hoi,

I have been playing around with the Chuck McManis (Thanks!) code for the
HandyBoard. Everything compiled quite easily on my COSMIC compiler. (Isn't
there a small bug in the LCD driver, I had to remove an = sign). I have
(almost?) finished a more detailed port in which I re-placed the compiler
specific options and settings with the ones needed for COSMIC. I also
changed most integers to characters to save some cycles.

I use two shaft encoders to measure wheel velocity. I created a simple shaft
encoding routine which work fine but implement the 32 cycle wait before
accessing the appropriate result registers. Since this routine runs 1000 Hz
for 2 encoders this implies a waste of 32 * 2 * 1000 = 64000 cycles.

Reading the pink book (chapter 12 page 14) I found the continues scan mode.
Wouldn't it be much faster to use this for the shaft encoding routines? I
will lose the 64000 cycle wait since the registers can then be expected to
carry the most recent value. The cost is that there are only 4 analog inputs
continuously read but while moving the robot it won't use more anyway. By
carefully arranging the sensors it will not be a problem. Otherwise I might
just write an interrupt-routine to change the scanned registers every so
often and store the results in 8 variables representing the analog ports.

Has anybody experiences with this (continues scanning mode)? Is somebody
good in quickly estimating the amount of cycles needed for one or both
option(s) and say if the idea is crap?

If there is an interest in the ported (or other) code let me know...

Groetjes, Jaron Paludanus


